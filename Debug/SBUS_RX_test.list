
SBUS_RX_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b10  08004b10  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b10  08004b10  00014b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b18  08004b18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b1c  08004b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08004b90  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08004b90  00020264  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d03a  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f14  00000000  00000000  0002d0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  0002eff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  0002fb88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002968e  00000000  00000000  00030618  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a1a1  00000000  00000000  00059ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102055  00000000  00000000  00063e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165e9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003238  00000000  00000000  00165f18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004a88 	.word	0x08004a88

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004a88 	.word	0x08004a88

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f043 0201 	orr.w	r2, r3, #1
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	601a      	str	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	601a      	str	r2, [r3, #0]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <LL_TIM_SetClockSource+0x28>)
 8000674:	4013      	ands	r3, r2
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	431a      	orrs	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	609a      	str	r2, [r3, #8]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	fffebff8 	.word	0xfffebff8

08000690 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	431a      	orrs	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	605a      	str	r2, [r3, #4]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	431a      	orrs	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	605a      	str	r2, [r3, #4]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	609a      	str	r2, [r3, #8]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000708:	4907      	ldr	r1, [pc, #28]	; (8000728 <LL_APB1_GRP1_EnableClock+0x2c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4313      	orrs	r3, r2
 800070e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4013      	ands	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800071a:	68fb      	ldr	r3, [r7, #12]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	40023800 	.word	0x40023800

0800072c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000738:	4907      	ldr	r1, [pc, #28]	; (8000758 <LL_APB2_GRP1_EnableClock+0x2c>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4313      	orrs	r3, r2
 800073e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000742:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4013      	ands	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	40023800 	.word	0x40023800

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint16_t counter=1;
 8000762:	2301      	movs	r3, #1
 8000764:	80fb      	strh	r3, [r7, #6]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 fc86 	bl	8001076 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f8b9 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 fa31 	bl	8000bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000772:	f000 fa11 	bl	8000b98 <MX_DMA_Init>
  MX_TIM1_Init();
 8000776:	f000 f947 	bl	8000a08 <MX_TIM1_Init>
  MX_UART7_Init();
 800077a:	f000 f9ad 	bl	8000ad8 <MX_UART7_Init>
  MX_USART3_Init();
 800077e:	f000 f9df 	bl	8000b40 <MX_USART3_Init>
  MX_TIM2_Init();
 8000782:	f000 f977 	bl	8000a74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000786:	2101      	movs	r1, #1
 8000788:	4849      	ldr	r0, [pc, #292]	; (80008b0 <main+0x154>)
 800078a:	f001 fb3e 	bl	8001e0a <HAL_GPIO_TogglePin>

  HAL_Delay(10);
 800078e:	200a      	movs	r0, #10
 8000790:	f000 fcce 	bl	8001130 <HAL_Delay>

  //Timer 1 principal functions
  LL_TIM_EnableCounter(TIM1);
 8000794:	4847      	ldr	r0, [pc, #284]	; (80008b4 <main+0x158>)
 8000796:	f7ff ff2b 	bl	80005f0 <LL_TIM_EnableCounter>
  LL_TIM_SetCounter(TIM1,0);
 800079a:	2100      	movs	r1, #0
 800079c:	4845      	ldr	r0, [pc, #276]	; (80008b4 <main+0x158>)
 800079e:	f7ff ff47 	bl	8000630 <LL_TIM_SetCounter>
  LL_TIM_GetCounter(TIM1);
 80007a2:	4844      	ldr	r0, [pc, #272]	; (80008b4 <main+0x158>)
 80007a4:	f7ff ff52 	bl	800064c <LL_TIM_GetCounter>

  //Timer 2 principal functions
  LL_TIM_EnableCounter(TIM2);
 80007a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80007ac:	f7ff ff20 	bl	80005f0 <LL_TIM_EnableCounter>
  LL_TIM_SetCounter(TIM2,0);
 80007b0:	2100      	movs	r1, #0
 80007b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80007b6:	f7ff ff3b 	bl	8000630 <LL_TIM_SetCounter>
  LL_TIM_GetCounter(TIM2);
 80007ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80007be:	f7ff ff45 	bl	800064c <LL_TIM_GetCounter>

  // Delay to let the receiver setup
  HAL_Delay(1000);
 80007c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c6:	f000 fcb3 	bl	8001130 <HAL_Delay>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); //turn off the green led
 80007ca:	2101      	movs	r1, #1
 80007cc:	4838      	ldr	r0, [pc, #224]	; (80008b0 <main+0x154>)
 80007ce:	f001 fb1c 	bl	8001e0a <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80007d2:	2180      	movs	r1, #128	; 0x80
 80007d4:	4836      	ldr	r0, [pc, #216]	; (80008b0 <main+0x154>)
 80007d6:	f001 fb18 	bl	8001e0a <HAL_GPIO_TogglePin>

  // Function Interrupt recieve mode
  HAL_UART_Receive_DMA (&huart7, payloads, 25);
 80007da:	2219      	movs	r2, #25
 80007dc:	4936      	ldr	r1, [pc, #216]	; (80008b8 <main+0x15c>)
 80007de:	4837      	ldr	r0, [pc, #220]	; (80008bc <main+0x160>)
 80007e0:	f002 fc68 	bl	80030b4 <HAL_UART_Receive_DMA>


  while (1)
  {
	  LL_TIM_SetCounter(TIM1,0);
 80007e4:	2100      	movs	r1, #0
 80007e6:	4833      	ldr	r0, [pc, #204]	; (80008b4 <main+0x158>)
 80007e8:	f7ff ff22 	bl	8000630 <LL_TIM_SetCounter>

	  if(counter>=50){
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	2b31      	cmp	r3, #49	; 0x31
 80007f0:	d929      	bls.n	8000846 <main+0xea>
	  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);//toggle the led 1Hz
 80007f2:	2180      	movs	r1, #128	; 0x80
 80007f4:	482e      	ldr	r0, [pc, #184]	; (80008b0 <main+0x154>)
 80007f6:	f001 fb08 	bl	8001e0a <HAL_GPIO_TogglePin>
	  		  counter=1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	80fb      	strh	r3, [r7, #6]
	  		  //Channels assignment




	  		  sprintf((char*)buff, "T= %ld\r\n", time1[0]);
 80007fe:	4b30      	ldr	r3, [pc, #192]	; (80008c0 <main+0x164>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	492f      	ldr	r1, [pc, #188]	; (80008c4 <main+0x168>)
 8000806:	4830      	ldr	r0, [pc, #192]	; (80008c8 <main+0x16c>)
 8000808:	f003 fd38 	bl	800427c <siprintf>
	  		  HAL_USART_Transmit(&husart3, buff, strlen((char*)buff), HAL_MAX_DELAY);//print of time between 2 different transmission
 800080c:	482e      	ldr	r0, [pc, #184]	; (80008c8 <main+0x16c>)
 800080e:	f7ff fd17 	bl	8000240 <strlen>
 8000812:	4603      	mov	r3, r0
 8000814:	b29a      	uxth	r2, r3
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	492b      	ldr	r1, [pc, #172]	; (80008c8 <main+0x16c>)
 800081c:	482b      	ldr	r0, [pc, #172]	; (80008cc <main+0x170>)
 800081e:	f003 f999 	bl	8003b54 <HAL_USART_Transmit>
	  		  sprintf((char*)buff, "%x\r\n", payloads[24]);
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <main+0x15c>)
 8000824:	7e1b      	ldrb	r3, [r3, #24]
 8000826:	461a      	mov	r2, r3
 8000828:	4929      	ldr	r1, [pc, #164]	; (80008d0 <main+0x174>)
 800082a:	4827      	ldr	r0, [pc, #156]	; (80008c8 <main+0x16c>)
 800082c:	f003 fd26 	bl	800427c <siprintf>
	  		  HAL_USART_Transmit(&husart3, buff, strlen((char*)buff), HAL_MAX_DELAY);//print del primo byte to debug
 8000830:	4825      	ldr	r0, [pc, #148]	; (80008c8 <main+0x16c>)
 8000832:	f7ff fd05 	bl	8000240 <strlen>
 8000836:	4603      	mov	r3, r0
 8000838:	b29a      	uxth	r2, r3
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	4922      	ldr	r1, [pc, #136]	; (80008c8 <main+0x16c>)
 8000840:	4822      	ldr	r0, [pc, #136]	; (80008cc <main+0x170>)
 8000842:	f003 f987 	bl	8003b54 <HAL_USART_Transmit>

	  	  }

	  if (SBUS_NewPack==1){
 8000846:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <main+0x178>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d123      	bne.n	8000896 <main+0x13a>

		  channels[0]  = (uint16_t) ((payloads[2] << 8  | payloads[1]) & 0x07FF);
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <main+0x15c>)
 8000850:	789b      	ldrb	r3, [r3, #2]
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	b21a      	sxth	r2, r3
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <main+0x15c>)
 8000858:	785b      	ldrb	r3, [r3, #1]
 800085a:	b21b      	sxth	r3, r3
 800085c:	4313      	orrs	r3, r2
 800085e:	b21b      	sxth	r3, r3
 8000860:	b29b      	uxth	r3, r3
 8000862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <main+0x17c>)
 800086a:	801a      	strh	r2, [r3, #0]
		  sprintf((char*)buff, "%d\r\n", channels[0]);
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <main+0x17c>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	491a      	ldr	r1, [pc, #104]	; (80008dc <main+0x180>)
 8000874:	4814      	ldr	r0, [pc, #80]	; (80008c8 <main+0x16c>)
 8000876:	f003 fd01 	bl	800427c <siprintf>
		  HAL_USART_Transmit(&husart3, buff, strlen((char*)buff), HAL_MAX_DELAY);//print del primo byte to debug
 800087a:	4813      	ldr	r0, [pc, #76]	; (80008c8 <main+0x16c>)
 800087c:	f7ff fce0 	bl	8000240 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	490f      	ldr	r1, [pc, #60]	; (80008c8 <main+0x16c>)
 800088a:	4810      	ldr	r0, [pc, #64]	; (80008cc <main+0x170>)
 800088c:	f003 f962 	bl	8003b54 <HAL_USART_Transmit>

		  SBUS_NewPack=0;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <main+0x178>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]





	  counter += 1;
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	3301      	adds	r3, #1
 800089a:	80fb      	strh	r3, [r7, #6]

	  while(LL_TIM_GetCounter(TIM1)<20000){
 800089c:	bf00      	nop
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <main+0x158>)
 80008a0:	f7ff fed4 	bl	800064c <LL_TIM_GetCounter>
 80008a4:	4602      	mov	r2, r0
 80008a6:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d9f7      	bls.n	800089e <main+0x142>
	  LL_TIM_SetCounter(TIM1,0);
 80008ae:	e799      	b.n	80007e4 <main+0x88>
 80008b0:	40020400 	.word	0x40020400
 80008b4:	40010000 	.word	0x40010000
 80008b8:	20000220 	.word	0x20000220
 80008bc:	2000009c 	.word	0x2000009c
 80008c0:	2000020c 	.word	0x2000020c
 80008c4:	08004aa0 	.word	0x08004aa0
 80008c8:	2000011c 	.word	0x2000011c
 80008cc:	200001bc 	.word	0x200001bc
 80008d0:	08004aac 	.word	0x08004aac
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	2000023c 	.word	0x2000023c
 80008dc:	08004ab4 	.word	0x08004ab4

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b0b8      	sub	sp, #224	; 0xe0
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008ea:	2234      	movs	r2, #52	; 0x34
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 fcbc 	bl	800426c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	2290      	movs	r2, #144	; 0x90
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f003 fcad 	bl	800426c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000912:	f001 fa95 	bl	8001e40 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <SystemClock_Config+0x120>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a39      	ldr	r2, [pc, #228]	; (8000a00 <SystemClock_Config+0x120>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <SystemClock_Config+0x120>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800092e:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <SystemClock_Config+0x124>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000936:	4a33      	ldr	r2, [pc, #204]	; (8000a04 <SystemClock_Config+0x124>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <SystemClock_Config+0x124>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800094a:	2301      	movs	r3, #1
 800094c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000950:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000958:	2302      	movs	r3, #2
 800095a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000966:	2308      	movs	r3, #8
 8000968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 800096c:	23c0      	movs	r3, #192	; 0xc0
 800096e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000972:	2302      	movs	r3, #2
 8000974:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fabc 	bl	8001f00 <HAL_RCC_OscConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800098e:	f000 f9a7 	bl	8000ce0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000992:	f001 fa65 	bl	8001e60 <HAL_PWREx_EnableOverDrive>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800099c:	f000 f9a0 	bl	8000ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	230f      	movs	r3, #15
 80009a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009c4:	2103      	movs	r1, #3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 fd0c 	bl	80023e4 <HAL_RCC_ClockConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80009d2:	f000 f985 	bl	8000ce0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7;
 80009d6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80009da:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009dc:	2300      	movs	r3, #0
 80009de:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 feef 	bl	80027cc <HAL_RCCEx_PeriphCLKConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0x118>
  {
    Error_Handler();
 80009f4:	f000 f974 	bl	8000ce0 <Error_Handler>
  }
}
 80009f8:	bf00      	nop
 80009fa:	37e0      	adds	r7, #224	; 0xe0
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000

08000a08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fe85 	bl	800072c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 96;
 8000a22:	2360      	movs	r3, #96	; 0x60
 8000a24:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65000;
 8000a2a:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8000a2e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	753b      	strb	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <MX_TIM1_Init+0x68>)
 8000a3e:	f003 fb51 	bl	80040e4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000a42:	480b      	ldr	r0, [pc, #44]	; (8000a70 <MX_TIM1_Init+0x68>)
 8000a44:	f7ff fde4 	bl	8000610 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <MX_TIM1_Init+0x68>)
 8000a4c:	f7ff fe0a 	bl	8000664 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000a50:	2100      	movs	r1, #0
 8000a52:	4807      	ldr	r0, [pc, #28]	; (8000a70 <MX_TIM1_Init+0x68>)
 8000a54:	f7ff fe1c 	bl	8000690 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_TIM1_Init+0x68>)
 8000a5c:	f7ff fe2b 	bl	80006b6 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <MX_TIM1_Init+0x68>)
 8000a62:	f7ff fe3b 	bl	80006dc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40010000 	.word	0x40010000

08000a74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fe37 	bl	80006fc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 96;
 8000a8e:	2360      	movs	r3, #96	; 0x60
 8000a90:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65000;
 8000a96:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8000a9a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000aa8:	f003 fb1c 	bl	80040e4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000aac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ab0:	f7ff fdae 	bl	8000610 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000aba:	f7ff fdd3 	bl	8000664 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ac4:	f7ff fde4 	bl	8000690 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000ac8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000acc:	f7ff fe06 	bl	80006dc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_UART7_Init+0x5c>)
 8000ade:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <MX_UART7_Init+0x60>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_UART7_Init+0x5c>)
 8000ae4:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <MX_UART7_Init+0x64>)
 8000ae6:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_UART7_Init+0x5c>)
 8000aea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aee:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <MX_UART7_Init+0x5c>)
 8000af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af6:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_UART7_Init+0x5c>)
 8000afa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000afe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_RX;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_UART7_Init+0x5c>)
 8000b02:	2204      	movs	r2, #4
 8000b04:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_UART7_Init+0x5c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_UART7_Init+0x5c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_UART7_Init+0x5c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_UART7_Init+0x5c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_UART7_Init+0x5c>)
 8000b20:	f002 fa7a 	bl	8003018 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_UART7_Init+0x56>
  {
    Error_Handler();
 8000b2a:	f000 f8d9 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2000009c 	.word	0x2000009c
 8000b38:	40007800 	.word	0x40007800
 8000b3c:	000186a0 	.word	0x000186a0

08000b40 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_USART3_Init+0x50>)
 8000b46:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <MX_USART3_Init+0x54>)
 8000b48:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USART3_Init+0x50>)
 8000b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b50:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_USART3_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <MX_USART3_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USART3_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <MX_USART3_Init+0x50>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USART3_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <MX_USART3_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USART3_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_USART3_Init+0x50>)
 8000b7e:	f002 ff9f 	bl	8003ac0 <HAL_USART_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART3_Init+0x4c>
  {
    Error_Handler();
 8000b88:	f000 f8aa 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200001bc 	.word	0x200001bc
 8000b94:	40004800 	.word	0x40004800

08000b98 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_DMA_Init+0x38>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <MX_DMA_Init+0x38>)
 8000ba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_DMA_Init+0x38>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	200e      	movs	r0, #14
 8000bbc:	f000 fbb5 	bl	800132a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bc0:	200e      	movs	r0, #14
 8000bc2:	f000 fbce 	bl	8001362 <HAL_NVIC_EnableIRQ>

}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a28      	ldr	r2, [pc, #160]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c02:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a22      	ldr	r2, [pc, #136]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a1c      	ldr	r2, [pc, #112]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a16      	ldr	r2, [pc, #88]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000c38:	f043 0310 	orr.w	r3, r3, #16
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_GPIO_Init+0xbc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2181      	movs	r1, #129	; 0x81
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <MX_GPIO_Init+0xc0>)
 8000c68:	f001 f8b6 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000c6c:	2381      	movs	r3, #129	; 0x81
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_GPIO_Init+0xc0>)
 8000c84:	f000 fefe 	bl	8001a84 <HAL_GPIO_Init>

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400

08000c98 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

//In this section I have to insert the call back for the interrupt function

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	time1[0] = LL_TIM_GetCounter(TIM2);
 8000ca0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ca4:	f7ff fcd2 	bl	800064c <LL_TIM_GetCounter>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_UART_RxCpltCallback+0x38>)
 8000cac:	601a      	str	r2, [r3, #0]
	LL_TIM_SetCounter(TIM2,0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cb4:	f7ff fcbc 	bl	8000630 <LL_TIM_SetCounter>

	SBUS_NewPack=1; //Set the new pak available variable to true
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_UART_RxCpltCallback+0x3c>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA (&huart7, payloads, 25);
 8000cbe:	2219      	movs	r2, #25
 8000cc0:	4905      	ldr	r1, [pc, #20]	; (8000cd8 <HAL_UART_RxCpltCallback+0x40>)
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <HAL_UART_RxCpltCallback+0x44>)
 8000cc4:	f002 f9f6 	bl	80030b4 <HAL_UART_Receive_DMA>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2000020c 	.word	0x2000020c
 8000cd4:	2000008c 	.word	0x2000008c
 8000cd8:	20000220 	.word	0x20000220
 8000cdc:	2000009c 	.word	0x2000009c

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_MspInit+0x44>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_MspInit+0x44>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_MspInit+0x44>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_MspInit+0x44>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_MspInit+0x44>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_MspInit+0x44>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800

08000d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a2f      	ldr	r2, [pc, #188]	; (8000e14 <HAL_UART_MspInit+0xdc>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d157      	bne.n	8000e0a <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <HAL_UART_MspInit+0xe0>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a2e      	ldr	r2, [pc, #184]	; (8000e18 <HAL_UART_MspInit+0xe0>)
 8000d60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <HAL_UART_MspInit+0xe0>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d72:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <HAL_UART_MspInit+0xe0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a28      	ldr	r2, [pc, #160]	; (8000e18 <HAL_UART_MspInit+0xe0>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <HAL_UART_MspInit+0xe0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d8a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	481d      	ldr	r0, [pc, #116]	; (8000e1c <HAL_UART_MspInit+0xe4>)
 8000da8:	f000 fe6c 	bl	8001a84 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <HAL_UART_MspInit+0xe8>)
 8000dae:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <HAL_UART_MspInit+0xec>)
 8000db0:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <HAL_UART_MspInit+0xe8>)
 8000db4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000db8:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_UART_MspInit+0xe8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_UART_MspInit+0xe8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_UART_MspInit+0xe8>)
 8000dc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dcc:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_UART_MspInit+0xe8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_UART_MspInit+0xe8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_UART_MspInit+0xe8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_UART_MspInit+0xe8>)
 8000de2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000de6:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_UART_MspInit+0xe8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8000dee:	480c      	ldr	r0, [pc, #48]	; (8000e20 <HAL_UART_MspInit+0xe8>)
 8000df0:	f000 fad2 	bl	8001398 <HAL_DMA_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000dfa:	f7ff ff71 	bl	8000ce0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_UART_MspInit+0xe8>)
 8000e02:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_UART_MspInit+0xe8>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40007800 	.word	0x40007800
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	2000015c 	.word	0x2000015c
 8000e24:	40026058 	.word	0x40026058

08000e28 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART3)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <HAL_USART_MspInit+0xb8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d145      	bne.n	8000ed6 <HAL_USART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <HAL_USART_MspInit+0xbc>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <HAL_USART_MspInit+0xbc>)
 8000e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <HAL_USART_MspInit+0xbc>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <HAL_USART_MspInit+0xbc>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a1f      	ldr	r2, [pc, #124]	; (8000ee4 <HAL_USART_MspInit+0xbc>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_USART_MspInit+0xbc>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_USART_MspInit+0xbc>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <HAL_USART_MspInit+0xbc>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_USART_MspInit+0xbc>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <HAL_USART_MspInit+0xc0>)
 8000eb0:	f000 fde8 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4806      	ldr	r0, [pc, #24]	; (8000eec <HAL_USART_MspInit+0xc4>)
 8000ed2:	f000 fdd7 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	; 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40004800 	.word	0x40004800
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40020c00 	.word	0x40020c00

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f44:	f000 f8d4 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <DMA1_Stream3_IRQHandler+0x10>)
 8000f52:	f000 fb2f 	bl	80015b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000015c 	.word	0x2000015c

08000f60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <_sbrk+0x50>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <_sbrk+0x16>
		heap_end = &end;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <_sbrk+0x50>)
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <_sbrk+0x54>)
 8000f74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <_sbrk+0x50>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <_sbrk+0x50>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	466a      	mov	r2, sp
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d907      	bls.n	8000f9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f8a:	f003 f945 	bl	8004218 <__errno>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	230c      	movs	r3, #12
 8000f92:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	e006      	b.n	8000fa8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <_sbrk+0x50>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a03      	ldr	r2, [pc, #12]	; (8000fb0 <_sbrk+0x50>)
 8000fa4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000090 	.word	0x20000090
 8000fb4:	20000268 	.word	0x20000268

08000fb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <SystemInit+0x5c>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc2:	4a14      	ldr	r2, [pc, #80]	; (8001014 <SystemInit+0x5c>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <SystemInit+0x60>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a11      	ldr	r2, [pc, #68]	; (8001018 <SystemInit+0x60>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <SystemInit+0x60>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <SystemInit+0x60>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	490d      	ldr	r1, [pc, #52]	; (8001018 <SystemInit+0x60>)
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <SystemInit+0x64>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <SystemInit+0x60>)
 8000fec:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <SystemInit+0x68>)
 8000fee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <SystemInit+0x60>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <SystemInit+0x60>)
 8000ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x60>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <SystemInit+0x5c>)
 8001004:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001008:	609a      	str	r2, [r3, #8]
#endif
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	40023800 	.word	0x40023800
 800101c:	fef6ffff 	.word	0xfef6ffff
 8001020:	24003010 	.word	0x24003010

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001028:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800102a:	e003      	b.n	8001034 <LoopCopyDataInit>

0800102c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800102e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001030:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001032:	3104      	adds	r1, #4

08001034 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001038:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800103a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800103c:	d3f6      	bcc.n	800102c <CopyDataInit>
  ldr  r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001040:	e002      	b.n	8001048 <LoopFillZerobss>

08001042 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001042:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001044:	f842 3b04 	str.w	r3, [r2], #4

08001048 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800104a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800104c:	d3f9      	bcc.n	8001042 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104e:	f7ff ffb3 	bl	8000fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f003 f8e7 	bl	8004224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fb81 	bl	800075c <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001060:	08004b20 	.word	0x08004b20
  ldr  r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001068:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800106c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001070:	20000264 	.word	0x20000264

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>

08001076 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107a:	2003      	movs	r0, #3
 800107c:	f000 f94a 	bl	8001314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001080:	2000      	movs	r0, #0
 8001082:	f000 f805 	bl	8001090 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001086:	f7ff fe33 	bl	8000cf0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x54>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x58>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f965 	bl	800137e <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00e      	b.n	80010dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d80a      	bhi.n	80010da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f000 f92d 	bl	800132a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <HAL_InitTick+0x5c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008
 8001114:	2000025c 	.word	0x2000025c

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2000025c 	.word	0x2000025c

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffee 	bl	8001118 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_Delay+0x40>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffde 	bl	8001118 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000008 	.word	0x20000008

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <__NVIC_SetPriorityGrouping+0x40>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00
 80011b8:	05fa0000 	.word	0x05fa0000

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0b      	blt.n	8001202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	4907      	ldr	r1, [pc, #28]	; (8001210 <__NVIC_EnableIRQ+0x38>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	490c      	ldr	r1, [pc, #48]	; (8001260 <__NVIC_SetPriority+0x4c>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4908      	ldr	r1, [pc, #32]	; (8001264 <__NVIC_SetPriority+0x50>)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	3b04      	subs	r3, #4
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	f04f 32ff 	mov.w	r2, #4294967295
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e0:	d301      	bcc.n	80012e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00f      	b.n	8001306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <SysTick_Config+0x40>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ee:	210f      	movs	r1, #15
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f7ff ff8e 	bl	8001214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <SysTick_Config+0x40>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SysTick_Config+0x40>)
 8001300:	2207      	movs	r2, #7
 8001302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010

08001314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff29 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff3e 	bl	80011bc <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff8e 	bl	8001268 <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff5d 	bl	8001214 <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff31 	bl	80011d8 <__NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffa2 	bl	80012d0 <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff feb8 	bl	8001118 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e099      	b.n	80014e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0201 	bic.w	r2, r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d4:	e00f      	b.n	80013f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013d6:	f7ff fe9f 	bl	8001118 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b05      	cmp	r3, #5
 80013e2:	d908      	bls.n	80013f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2220      	movs	r2, #32
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2203      	movs	r2, #3
 80013ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e078      	b.n	80014e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1e8      	bne.n	80013d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <HAL_DMA_Init+0x158>)
 8001410:	4013      	ands	r3, r2
 8001412:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001422:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4313      	orrs	r3, r2
 8001446:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	2b04      	cmp	r3, #4
 800144e:	d107      	bne.n	8001460 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4313      	orrs	r3, r2
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4313      	orrs	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f023 0307 	bic.w	r3, r3, #7
 8001476:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4313      	orrs	r3, r2
 8001480:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	2b04      	cmp	r3, #4
 8001488:	d117      	bne.n	80014ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4313      	orrs	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00e      	beq.n	80014ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 fa77 	bl	8001990 <DMA_CheckFifoParam>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2240      	movs	r2, #64	; 0x40
 80014ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014b6:	2301      	movs	r3, #1
 80014b8:	e016      	b.n	80014e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fa2e 	bl	8001924 <DMA_CalcBaseAndBitshift>
 80014c8:	4603      	mov	r3, r0
 80014ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	223f      	movs	r2, #63	; 0x3f
 80014d2:	409a      	lsls	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	e010803f 	.word	0xe010803f

080014f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <HAL_DMA_Start_IT+0x26>
 8001516:	2302      	movs	r3, #2
 8001518:	e048      	b.n	80015ac <HAL_DMA_Start_IT+0xb8>
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d137      	bne.n	800159e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2202      	movs	r2, #2
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 f9c0 	bl	80018c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154c:	223f      	movs	r2, #63	; 0x3f
 800154e:	409a      	lsls	r2, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0216 	orr.w	r2, r2, #22
 8001562:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	695a      	ldr	r2, [r3, #20]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001572:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0208 	orr.w	r2, r2, #8
 800158a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e005      	b.n	80015aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015a6:	2302      	movs	r3, #2
 80015a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80015c0:	4b92      	ldr	r3, [pc, #584]	; (800180c <HAL_DMA_IRQHandler+0x258>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a92      	ldr	r2, [pc, #584]	; (8001810 <HAL_DMA_IRQHandler+0x25c>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0a9b      	lsrs	r3, r3, #10
 80015cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	2208      	movs	r2, #8
 80015e0:	409a      	lsls	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d01a      	beq.n	8001620 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0204 	bic.w	r2, r2, #4
 8001606:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	2208      	movs	r2, #8
 800160e:	409a      	lsls	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001618:	f043 0201 	orr.w	r2, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001624:	2201      	movs	r2, #1
 8001626:	409a      	lsls	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d012      	beq.n	8001656 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001642:	2201      	movs	r2, #1
 8001644:	409a      	lsls	r2, r3
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164e:	f043 0202 	orr.w	r2, r3, #2
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165a:	2204      	movs	r2, #4
 800165c:	409a      	lsls	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d012      	beq.n	800168c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00b      	beq.n	800168c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	2204      	movs	r2, #4
 800167a:	409a      	lsls	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001684:	f043 0204 	orr.w	r2, r3, #4
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001690:	2210      	movs	r2, #16
 8001692:	409a      	lsls	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d043      	beq.n	8001724 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d03c      	beq.n	8001724 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ae:	2210      	movs	r2, #16
 80016b0:	409a      	lsls	r2, r3
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d018      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d108      	bne.n	80016e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d024      	beq.n	8001724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	4798      	blx	r3
 80016e2:	e01f      	b.n	8001724 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d01b      	beq.n	8001724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	4798      	blx	r3
 80016f4:	e016      	b.n	8001724 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0208 	bic.w	r2, r2, #8
 8001712:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001728:	2220      	movs	r2, #32
 800172a:	409a      	lsls	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4013      	ands	r3, r2
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 808e 	beq.w	8001852 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 8086 	beq.w	8001852 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174a:	2220      	movs	r2, #32
 800174c:	409a      	lsls	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b05      	cmp	r3, #5
 800175c:	d136      	bne.n	80017cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0216 	bic.w	r2, r2, #22
 800176c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800177c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <HAL_DMA_IRQHandler+0x1da>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0208 	bic.w	r2, r2, #8
 800179c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a2:	223f      	movs	r2, #63	; 0x3f
 80017a4:	409a      	lsls	r2, r3
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d07d      	beq.n	80018be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	4798      	blx	r3
        }
        return;
 80017ca:	e078      	b.n	80018be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d01c      	beq.n	8001814 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d108      	bne.n	80017fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d030      	beq.n	8001852 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
 80017f8:	e02b      	b.n	8001852 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d027      	beq.n	8001852 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	4798      	blx	r3
 800180a:	e022      	b.n	8001852 <HAL_DMA_IRQHandler+0x29e>
 800180c:	20000000 	.word	0x20000000
 8001810:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10f      	bne.n	8001842 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0210 	bic.w	r2, r2, #16
 8001830:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001856:	2b00      	cmp	r3, #0
 8001858:	d032      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d022      	beq.n	80018ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2205      	movs	r2, #5
 800186a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3301      	adds	r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	429a      	cmp	r2, r3
 8001888:	d307      	bcc.n	800189a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f2      	bne.n	800187e <HAL_DMA_IRQHandler+0x2ca>
 8001898:	e000      	b.n	800189c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800189a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	4798      	blx	r3
 80018bc:	e000      	b.n	80018c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80018be:	bf00      	nop
    }
  }
}
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop

080018c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b40      	cmp	r3, #64	; 0x40
 80018f4:	d108      	bne.n	8001908 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001906:	e007      	b.n	8001918 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	60da      	str	r2, [r3, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	3b10      	subs	r3, #16
 8001934:	4a13      	ldr	r2, [pc, #76]	; (8001984 <DMA_CalcBaseAndBitshift+0x60>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <DMA_CalcBaseAndBitshift+0x64>)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d908      	bls.n	8001964 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <DMA_CalcBaseAndBitshift+0x68>)
 800195a:	4013      	ands	r3, r2
 800195c:	1d1a      	adds	r2, r3, #4
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	659a      	str	r2, [r3, #88]	; 0x58
 8001962:	e006      	b.n	8001972 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <DMA_CalcBaseAndBitshift+0x68>)
 800196c:	4013      	ands	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	aaaaaaab 	.word	0xaaaaaaab
 8001988:	08004ad4 	.word	0x08004ad4
 800198c:	fffffc00 	.word	0xfffffc00

08001990 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d11f      	bne.n	80019ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d855      	bhi.n	8001a5c <DMA_CheckFifoParam+0xcc>
 80019b0:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <DMA_CheckFifoParam+0x28>)
 80019b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b6:	bf00      	nop
 80019b8:	080019c9 	.word	0x080019c9
 80019bc:	080019db 	.word	0x080019db
 80019c0:	080019c9 	.word	0x080019c9
 80019c4:	08001a5d 	.word	0x08001a5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d045      	beq.n	8001a60 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d8:	e042      	b.n	8001a60 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019e2:	d13f      	bne.n	8001a64 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e8:	e03c      	b.n	8001a64 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019f2:	d121      	bne.n	8001a38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d836      	bhi.n	8001a68 <DMA_CheckFifoParam+0xd8>
 80019fa:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <DMA_CheckFifoParam+0x70>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a11 	.word	0x08001a11
 8001a04:	08001a17 	.word	0x08001a17
 8001a08:	08001a11 	.word	0x08001a11
 8001a0c:	08001a29 	.word	0x08001a29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
      break;
 8001a14:	e02f      	b.n	8001a76 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d024      	beq.n	8001a6c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a26:	e021      	b.n	8001a6c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a30:	d11e      	bne.n	8001a70 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a36:	e01b      	b.n	8001a70 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d902      	bls.n	8001a44 <DMA_CheckFifoParam+0xb4>
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d003      	beq.n	8001a4a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a42:	e018      	b.n	8001a76 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
      break;
 8001a48:	e015      	b.n	8001a76 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00e      	beq.n	8001a74 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	73fb      	strb	r3, [r7, #15]
      break;
 8001a5a:	e00b      	b.n	8001a74 <DMA_CheckFifoParam+0xe4>
      break;
 8001a5c:	bf00      	nop
 8001a5e:	e00a      	b.n	8001a76 <DMA_CheckFifoParam+0xe6>
      break;
 8001a60:	bf00      	nop
 8001a62:	e008      	b.n	8001a76 <DMA_CheckFifoParam+0xe6>
      break;
 8001a64:	bf00      	nop
 8001a66:	e006      	b.n	8001a76 <DMA_CheckFifoParam+0xe6>
      break;
 8001a68:	bf00      	nop
 8001a6a:	e004      	b.n	8001a76 <DMA_CheckFifoParam+0xe6>
      break;
 8001a6c:	bf00      	nop
 8001a6e:	e002      	b.n	8001a76 <DMA_CheckFifoParam+0xe6>
      break;   
 8001a70:	bf00      	nop
 8001a72:	e000      	b.n	8001a76 <DMA_CheckFifoParam+0xe6>
      break;
 8001a74:	bf00      	nop
    }
  } 
  
  return status; 
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e175      	b.n	8001d90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	f040 8164 	bne.w	8001d8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x4e>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d123      	bne.n	8001b1a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	69b9      	ldr	r1, [r7, #24]
 8001b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0203 	and.w	r2, r3, #3
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d00b      	beq.n	8001b6e <HAL_GPIO_Init+0xea>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d007      	beq.n	8001b6e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b62:	2b11      	cmp	r3, #17
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b12      	cmp	r3, #18
 8001b6c:	d130      	bne.n	8001bd0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 0201 	and.w	r2, r3, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80be 	beq.w	8001d8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	4b65      	ldr	r3, [pc, #404]	; (8001da4 <HAL_GPIO_Init+0x320>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	4a64      	ldr	r2, [pc, #400]	; (8001da4 <HAL_GPIO_Init+0x320>)
 8001c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c18:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1a:	4b62      	ldr	r3, [pc, #392]	; (8001da4 <HAL_GPIO_Init+0x320>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c26:	4a60      	ldr	r2, [pc, #384]	; (8001da8 <HAL_GPIO_Init+0x324>)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a57      	ldr	r2, [pc, #348]	; (8001dac <HAL_GPIO_Init+0x328>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d037      	beq.n	8001cc2 <HAL_GPIO_Init+0x23e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a56      	ldr	r2, [pc, #344]	; (8001db0 <HAL_GPIO_Init+0x32c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d031      	beq.n	8001cbe <HAL_GPIO_Init+0x23a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a55      	ldr	r2, [pc, #340]	; (8001db4 <HAL_GPIO_Init+0x330>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d02b      	beq.n	8001cba <HAL_GPIO_Init+0x236>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a54      	ldr	r2, [pc, #336]	; (8001db8 <HAL_GPIO_Init+0x334>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d025      	beq.n	8001cb6 <HAL_GPIO_Init+0x232>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a53      	ldr	r2, [pc, #332]	; (8001dbc <HAL_GPIO_Init+0x338>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01f      	beq.n	8001cb2 <HAL_GPIO_Init+0x22e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_GPIO_Init+0x33c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d019      	beq.n	8001cae <HAL_GPIO_Init+0x22a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a51      	ldr	r2, [pc, #324]	; (8001dc4 <HAL_GPIO_Init+0x340>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_GPIO_Init+0x226>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a50      	ldr	r2, [pc, #320]	; (8001dc8 <HAL_GPIO_Init+0x344>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00d      	beq.n	8001ca6 <HAL_GPIO_Init+0x222>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4f      	ldr	r2, [pc, #316]	; (8001dcc <HAL_GPIO_Init+0x348>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <HAL_GPIO_Init+0x21e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4e      	ldr	r2, [pc, #312]	; (8001dd0 <HAL_GPIO_Init+0x34c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_GPIO_Init+0x21a>
 8001c9a:	2309      	movs	r3, #9
 8001c9c:	e012      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	e010      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001ca2:	2308      	movs	r3, #8
 8001ca4:	e00e      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	e00c      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001caa:	2306      	movs	r3, #6
 8001cac:	e00a      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cae:	2305      	movs	r3, #5
 8001cb0:	e008      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e004      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e002      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	f002 0203 	and.w	r2, r2, #3
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	4093      	lsls	r3, r2
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cd4:	4934      	ldr	r1, [pc, #208]	; (8001da8 <HAL_GPIO_Init+0x324>)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce2:	4b3c      	ldr	r3, [pc, #240]	; (8001dd4 <HAL_GPIO_Init+0x350>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d06:	4a33      	ldr	r2, [pc, #204]	; (8001dd4 <HAL_GPIO_Init+0x350>)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d0c:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <HAL_GPIO_Init+0x350>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d30:	4a28      	ldr	r2, [pc, #160]	; (8001dd4 <HAL_GPIO_Init+0x350>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d36:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_GPIO_Init+0x350>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d5a:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <HAL_GPIO_Init+0x350>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_GPIO_Init+0x350>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d84:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <HAL_GPIO_Init+0x350>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b0f      	cmp	r3, #15
 8001d94:	f67f ae86 	bls.w	8001aa4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3724      	adds	r7, #36	; 0x24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40013800 	.word	0x40013800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40020400 	.word	0x40020400
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40021400 	.word	0x40021400
 8001dc4:	40021800 	.word	0x40021800
 8001dc8:	40021c00 	.word	0x40021c00
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40022400 	.word	0x40022400
 8001dd4:	40013c00 	.word	0x40013c00

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001df4:	e003      	b.n	8001dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d104      	bne.n	8001e2e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e24:	887b      	ldrh	r3, [r7, #2]
 8001e26:	041a      	lsls	r2, r3, #16
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40007000 	.word	0x40007000

08001e60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e8e:	f7ff f943 	bl	8001118 <HAL_GetTick>
 8001e92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e94:	e009      	b.n	8001eaa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e96:	f7ff f93f 	bl	8001118 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ea4:	d901      	bls.n	8001eaa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e022      	b.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb6:	d1ee      	bne.n	8001e96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec4:	f7ff f928 	bl	8001118 <HAL_GetTick>
 8001ec8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eca:	e009      	b.n	8001ee0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ecc:	f7ff f924 	bl	8001118 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eda:	d901      	bls.n	8001ee0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e007      	b.n	8001ef0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001eec:	d1ee      	bne.n	8001ecc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40007000 	.word	0x40007000

08001f00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e25e      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8087 	beq.w	8002032 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f24:	4b96      	ldr	r3, [pc, #600]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d00c      	beq.n	8001f4a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f30:	4b93      	ldr	r3, [pc, #588]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d112      	bne.n	8001f62 <HAL_RCC_OscConfig+0x62>
 8001f3c:	4b90      	ldr	r3, [pc, #576]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f48:	d10b      	bne.n	8001f62 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4a:	4b8d      	ldr	r3, [pc, #564]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d06c      	beq.n	8002030 <HAL_RCC_OscConfig+0x130>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d168      	bne.n	8002030 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e238      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x7a>
 8001f6c:	4b84      	ldr	r3, [pc, #528]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a83      	ldr	r2, [pc, #524]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	e02e      	b.n	8001fd8 <HAL_RCC_OscConfig+0xd8>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x9c>
 8001f82:	4b7f      	ldr	r3, [pc, #508]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a7e      	ldr	r2, [pc, #504]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b7c      	ldr	r3, [pc, #496]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a7b      	ldr	r2, [pc, #492]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e01d      	b.n	8001fd8 <HAL_RCC_OscConfig+0xd8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xc0>
 8001fa6:	4b76      	ldr	r3, [pc, #472]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a75      	ldr	r2, [pc, #468]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b73      	ldr	r3, [pc, #460]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a72      	ldr	r2, [pc, #456]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCC_OscConfig+0xd8>
 8001fc0:	4b6f      	ldr	r3, [pc, #444]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6e      	ldr	r2, [pc, #440]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b6c      	ldr	r3, [pc, #432]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a6b      	ldr	r2, [pc, #428]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f89a 	bl	8001118 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff f896 	bl	8001118 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1ec      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	4b61      	ldr	r3, [pc, #388]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xe8>
 8002006:	e014      	b.n	8002032 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff f886 	bl	8001118 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff f882 	bl	8001118 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	; 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1d8      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	4b57      	ldr	r3, [pc, #348]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x110>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d069      	beq.n	8002112 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800203e:	4b50      	ldr	r3, [pc, #320]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00b      	beq.n	8002062 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800204a:	4b4d      	ldr	r3, [pc, #308]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b08      	cmp	r3, #8
 8002054:	d11c      	bne.n	8002090 <HAL_RCC_OscConfig+0x190>
 8002056:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d116      	bne.n	8002090 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_RCC_OscConfig+0x17a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d001      	beq.n	800207a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e1ac      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	493d      	ldr	r1, [pc, #244]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	e040      	b.n	8002112 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d023      	beq.n	80020e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002098:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a38      	ldr	r2, [pc, #224]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff f838 	bl	8001118 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7ff f834 	bl	8001118 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e18a      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	4b30      	ldr	r3, [pc, #192]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ca:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4929      	ldr	r1, [pc, #164]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
 80020de:	e018      	b.n	8002112 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e0:	4b27      	ldr	r3, [pc, #156]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a26      	ldr	r2, [pc, #152]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 80020e6:	f023 0301 	bic.w	r3, r3, #1
 80020ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff f814 	bl	8001118 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f4:	f7ff f810 	bl	8001118 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e166      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d038      	beq.n	8002190 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d019      	beq.n	800215a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212a:	4a15      	ldr	r2, [pc, #84]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002132:	f7fe fff1 	bl	8001118 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213a:	f7fe ffed 	bl	8001118 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e143      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800214e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x23a>
 8002158:	e01a      	b.n	8002190 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 800215c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_RCC_OscConfig+0x280>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002166:	f7fe ffd7 	bl	8001118 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800216e:	f7fe ffd3 	bl	8001118 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d903      	bls.n	8002184 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e129      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
 8002180:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002184:	4b95      	ldr	r3, [pc, #596]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1ee      	bne.n	800216e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80a4 	beq.w	80022e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219e:	4b8f      	ldr	r3, [pc, #572]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10d      	bne.n	80021c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	4b8c      	ldr	r3, [pc, #560]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a8b      	ldr	r2, [pc, #556]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b89      	ldr	r3, [pc, #548]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021c2:	2301      	movs	r3, #1
 80021c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c6:	4b86      	ldr	r3, [pc, #536]	; (80023e0 <HAL_RCC_OscConfig+0x4e0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d118      	bne.n	8002204 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021d2:	4b83      	ldr	r3, [pc, #524]	; (80023e0 <HAL_RCC_OscConfig+0x4e0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a82      	ldr	r2, [pc, #520]	; (80023e0 <HAL_RCC_OscConfig+0x4e0>)
 80021d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021de:	f7fe ff9b 	bl	8001118 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80021e6:	f7fe ff97 	bl	8001118 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b64      	cmp	r3, #100	; 0x64
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0ed      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f8:	4b79      	ldr	r3, [pc, #484]	; (80023e0 <HAL_RCC_OscConfig+0x4e0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x31a>
 800220c:	4b73      	ldr	r3, [pc, #460]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a72      	ldr	r2, [pc, #456]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
 8002218:	e02d      	b.n	8002276 <HAL_RCC_OscConfig+0x376>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x33c>
 8002222:	4b6e      	ldr	r3, [pc, #440]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	4a6d      	ldr	r2, [pc, #436]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6713      	str	r3, [r2, #112]	; 0x70
 800222e:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	4a6a      	ldr	r2, [pc, #424]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002234:	f023 0304 	bic.w	r3, r3, #4
 8002238:	6713      	str	r3, [r2, #112]	; 0x70
 800223a:	e01c      	b.n	8002276 <HAL_RCC_OscConfig+0x376>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b05      	cmp	r3, #5
 8002242:	d10c      	bne.n	800225e <HAL_RCC_OscConfig+0x35e>
 8002244:	4b65      	ldr	r3, [pc, #404]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	4a64      	ldr	r2, [pc, #400]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	6713      	str	r3, [r2, #112]	; 0x70
 8002250:	4b62      	ldr	r3, [pc, #392]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	4a61      	ldr	r2, [pc, #388]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6713      	str	r3, [r2, #112]	; 0x70
 800225c:	e00b      	b.n	8002276 <HAL_RCC_OscConfig+0x376>
 800225e:	4b5f      	ldr	r3, [pc, #380]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002262:	4a5e      	ldr	r2, [pc, #376]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	6713      	str	r3, [r2, #112]	; 0x70
 800226a:	4b5c      	ldr	r3, [pc, #368]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	4a5b      	ldr	r2, [pc, #364]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002270:	f023 0304 	bic.w	r3, r3, #4
 8002274:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d015      	beq.n	80022aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7fe ff4b 	bl	8001118 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7fe ff47 	bl	8001118 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e09b      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ee      	beq.n	8002286 <HAL_RCC_OscConfig+0x386>
 80022a8:	e014      	b.n	80022d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022aa:	f7fe ff35 	bl	8001118 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7fe ff31 	bl	8001118 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e085      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	4b44      	ldr	r3, [pc, #272]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1ee      	bne.n	80022b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d105      	bne.n	80022e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022da:	4b40      	ldr	r3, [pc, #256]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a3f      	ldr	r2, [pc, #252]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80022e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d071      	beq.n	80023d2 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ee:	4b3b      	ldr	r3, [pc, #236]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d069      	beq.n	80023ce <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d14b      	bne.n	800239a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a35      	ldr	r2, [pc, #212]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800230c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7fe ff03 	bl	8001118 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002316:	f7fe feff 	bl	8001118 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e055      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002328:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	019b      	lsls	r3, r3, #6
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	085b      	lsrs	r3, r3, #1
 800234c:	3b01      	subs	r3, #1
 800234e:	041b      	lsls	r3, r3, #16
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	061b      	lsls	r3, r3, #24
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	071b      	lsls	r3, r3, #28
 8002360:	491e      	ldr	r1, [pc, #120]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1c      	ldr	r2, [pc, #112]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800236c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002372:	f7fe fed1 	bl	8001118 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237a:	f7fe fecd 	bl	8001118 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e023      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x47a>
 8002398:	e01b      	b.n	80023d2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80023a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe feb7 	bl	8001118 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ae:	f7fe feb3 	bl	8001118 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e009      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_RCC_OscConfig+0x4dc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x4ae>
 80023cc:	e001      	b.n	80023d2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40007000 	.word	0x40007000

080023e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0ce      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b69      	ldr	r3, [pc, #420]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d910      	bls.n	800242c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 020f 	bic.w	r2, r3, #15
 8002412:	4964      	ldr	r1, [pc, #400]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b62      	ldr	r3, [pc, #392]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0b6      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b58      	ldr	r3, [pc, #352]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a57      	ldr	r2, [pc, #348]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800244e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800245c:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002466:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b4f      	ldr	r3, [pc, #316]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	494c      	ldr	r1, [pc, #304]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d040      	beq.n	8002508 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d115      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e07d      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e071      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e069      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4935      	ldr	r1, [pc, #212]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d8:	f7fe fe1e 	bl	8001118 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe fe1a 	bl	8001118 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e051      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 020c 	and.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d1eb      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002508:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d210      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 020f 	bic.w	r2, r3, #15
 800251e:	4921      	ldr	r1, [pc, #132]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e030      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4915      	ldr	r1, [pc, #84]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	490d      	ldr	r1, [pc, #52]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002576:	f000 f81d 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 800257a:	4601      	mov	r1, r0
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	fa21 f303 	lsr.w	r3, r1, r3
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <HAL_RCC_ClockConfig+0x1cc>)
 8002590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002592:	2000      	movs	r0, #0
 8002594:	f7fe fd7c 	bl	8001090 <HAL_InitTick>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023c00 	.word	0x40023c00
 80025a8:	40023800 	.word	0x40023800
 80025ac:	08004abc 	.word	0x08004abc
 80025b0:	20000000 	.word	0x20000000

080025b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	2300      	movs	r3, #0
 80025c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ca:	4b63      	ldr	r3, [pc, #396]	; (8002758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d007      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x32>
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d008      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x38>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 80b4 	bne.w	8002748 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025e0:	4b5e      	ldr	r3, [pc, #376]	; (800275c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025e2:	60bb      	str	r3, [r7, #8]
       break;
 80025e4:	e0b3      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025e6:	4b5e      	ldr	r3, [pc, #376]	; (8002760 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80025e8:	60bb      	str	r3, [r7, #8]
      break;
 80025ea:	e0b0      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ec:	4b5a      	ldr	r3, [pc, #360]	; (8002758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025f6:	4b58      	ldr	r3, [pc, #352]	; (8002758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d04a      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002602:	4b55      	ldr	r3, [pc, #340]	; (8002758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	099b      	lsrs	r3, r3, #6
 8002608:	f04f 0400 	mov.w	r4, #0
 800260c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	ea03 0501 	and.w	r5, r3, r1
 8002618:	ea04 0602 	and.w	r6, r4, r2
 800261c:	4629      	mov	r1, r5
 800261e:	4632      	mov	r2, r6
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	f04f 0400 	mov.w	r4, #0
 8002628:	0154      	lsls	r4, r2, #5
 800262a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800262e:	014b      	lsls	r3, r1, #5
 8002630:	4619      	mov	r1, r3
 8002632:	4622      	mov	r2, r4
 8002634:	1b49      	subs	r1, r1, r5
 8002636:	eb62 0206 	sbc.w	r2, r2, r6
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	f04f 0400 	mov.w	r4, #0
 8002642:	0194      	lsls	r4, r2, #6
 8002644:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002648:	018b      	lsls	r3, r1, #6
 800264a:	1a5b      	subs	r3, r3, r1
 800264c:	eb64 0402 	sbc.w	r4, r4, r2
 8002650:	f04f 0100 	mov.w	r1, #0
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	00e2      	lsls	r2, r4, #3
 800265a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800265e:	00d9      	lsls	r1, r3, #3
 8002660:	460b      	mov	r3, r1
 8002662:	4614      	mov	r4, r2
 8002664:	195b      	adds	r3, r3, r5
 8002666:	eb44 0406 	adc.w	r4, r4, r6
 800266a:	f04f 0100 	mov.w	r1, #0
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	0262      	lsls	r2, r4, #9
 8002674:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002678:	0259      	lsls	r1, r3, #9
 800267a:	460b      	mov	r3, r1
 800267c:	4614      	mov	r4, r2
 800267e:	4618      	mov	r0, r3
 8002680:	4621      	mov	r1, r4
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f04f 0400 	mov.w	r4, #0
 8002688:	461a      	mov	r2, r3
 800268a:	4623      	mov	r3, r4
 800268c:	f7fd fe30 	bl	80002f0 <__aeabi_uldivmod>
 8002690:	4603      	mov	r3, r0
 8002692:	460c      	mov	r4, r1
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	e049      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002698:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	099b      	lsrs	r3, r3, #6
 800269e:	f04f 0400 	mov.w	r4, #0
 80026a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	ea03 0501 	and.w	r5, r3, r1
 80026ae:	ea04 0602 	and.w	r6, r4, r2
 80026b2:	4629      	mov	r1, r5
 80026b4:	4632      	mov	r2, r6
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	f04f 0400 	mov.w	r4, #0
 80026be:	0154      	lsls	r4, r2, #5
 80026c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026c4:	014b      	lsls	r3, r1, #5
 80026c6:	4619      	mov	r1, r3
 80026c8:	4622      	mov	r2, r4
 80026ca:	1b49      	subs	r1, r1, r5
 80026cc:	eb62 0206 	sbc.w	r2, r2, r6
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	f04f 0400 	mov.w	r4, #0
 80026d8:	0194      	lsls	r4, r2, #6
 80026da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026de:	018b      	lsls	r3, r1, #6
 80026e0:	1a5b      	subs	r3, r3, r1
 80026e2:	eb64 0402 	sbc.w	r4, r4, r2
 80026e6:	f04f 0100 	mov.w	r1, #0
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	00e2      	lsls	r2, r4, #3
 80026f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026f4:	00d9      	lsls	r1, r3, #3
 80026f6:	460b      	mov	r3, r1
 80026f8:	4614      	mov	r4, r2
 80026fa:	195b      	adds	r3, r3, r5
 80026fc:	eb44 0406 	adc.w	r4, r4, r6
 8002700:	f04f 0100 	mov.w	r1, #0
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	02a2      	lsls	r2, r4, #10
 800270a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800270e:	0299      	lsls	r1, r3, #10
 8002710:	460b      	mov	r3, r1
 8002712:	4614      	mov	r4, r2
 8002714:	4618      	mov	r0, r3
 8002716:	4621      	mov	r1, r4
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f04f 0400 	mov.w	r4, #0
 800271e:	461a      	mov	r2, r3
 8002720:	4623      	mov	r3, r4
 8002722:	f7fd fde5 	bl	80002f0 <__aeabi_uldivmod>
 8002726:	4603      	mov	r3, r0
 8002728:	460c      	mov	r4, r1
 800272a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	3301      	adds	r3, #1
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	60bb      	str	r3, [r7, #8]
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800274a:	60bb      	str	r3, [r7, #8]
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	68bb      	ldr	r3, [r7, #8]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	00f42400 	.word	0x00f42400
 8002760:	007a1200 	.word	0x007a1200

08002764 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <HAL_RCC_GetHCLKFreq+0x14>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000000 	.word	0x20000000

0800277c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002780:	f7ff fff0 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 8002784:	4601      	mov	r1, r0
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	0a9b      	lsrs	r3, r3, #10
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4a03      	ldr	r2, [pc, #12]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	08004acc 	.word	0x08004acc

080027a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027a8:	f7ff ffdc 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 80027ac:	4601      	mov	r1, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0b5b      	lsrs	r3, r3, #13
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4a03      	ldr	r2, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	08004acc 	.word	0x08004acc

080027cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d012      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027f4:	4b69      	ldr	r3, [pc, #420]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a68      	ldr	r2, [pc, #416]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027fe:	6093      	str	r3, [r2, #8]
 8002800:	4b66      	ldr	r3, [pc, #408]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002808:	4964      	ldr	r1, [pc, #400]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002816:	2301      	movs	r3, #1
 8002818:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d017      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002826:	4b5d      	ldr	r3, [pc, #372]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800282c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002834:	4959      	ldr	r1, [pc, #356]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002844:	d101      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002846:	2301      	movs	r3, #1
 8002848:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002852:	2301      	movs	r3, #1
 8002854:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d017      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002862:	4b4e      	ldr	r3, [pc, #312]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002868:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	494a      	ldr	r1, [pc, #296]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002880:	d101      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002882:	2301      	movs	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800288e:	2301      	movs	r3, #1
 8002890:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800289e:	2301      	movs	r3, #1
 80028a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 808b 	beq.w	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028b0:	4b3a      	ldr	r3, [pc, #232]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	4a39      	ldr	r2, [pc, #228]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ba:	6413      	str	r3, [r2, #64]	; 0x40
 80028bc:	4b37      	ldr	r3, [pc, #220]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028c8:	4b35      	ldr	r3, [pc, #212]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a34      	ldr	r2, [pc, #208]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d4:	f7fe fc20 	bl	8001118 <HAL_GetTick>
 80028d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7fe fc1c 	bl	8001118 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e38d      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028fa:	4b28      	ldr	r3, [pc, #160]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002902:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d035      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	429a      	cmp	r2, r3
 8002916:	d02e      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002920:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002926:	4a1d      	ldr	r2, [pc, #116]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002938:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800293a:	4a18      	ldr	r2, [pc, #96]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002940:	4b16      	ldr	r3, [pc, #88]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d114      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe fbe4 	bl	8001118 <HAL_GetTick>
 8002950:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	e00a      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7fe fbe0 	bl	8001118 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e34f      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ee      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002982:	d111      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002992:	400b      	ands	r3, r1
 8002994:	4901      	ldr	r1, [pc, #4]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
 800299a:	e00b      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800299c:	40023800 	.word	0x40023800
 80029a0:	40007000 	.word	0x40007000
 80029a4:	0ffffcff 	.word	0x0ffffcff
 80029a8:	4bb3      	ldr	r3, [pc, #716]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4ab2      	ldr	r2, [pc, #712]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029b2:	6093      	str	r3, [r2, #8]
 80029b4:	4bb0      	ldr	r3, [pc, #704]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c0:	49ad      	ldr	r1, [pc, #692]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d010      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029d2:	4ba9      	ldr	r3, [pc, #676]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d8:	4aa7      	ldr	r2, [pc, #668]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029e2:	4ba5      	ldr	r3, [pc, #660]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	49a2      	ldr	r1, [pc, #648]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a00:	4b9d      	ldr	r3, [pc, #628]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a0e:	499a      	ldr	r1, [pc, #616]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a22:	4b95      	ldr	r3, [pc, #596]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a30:	4991      	ldr	r1, [pc, #580]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a44:	4b8c      	ldr	r3, [pc, #560]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a52:	4989      	ldr	r1, [pc, #548]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a66:	4b84      	ldr	r3, [pc, #528]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4980      	ldr	r1, [pc, #512]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a88:	4b7b      	ldr	r3, [pc, #492]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	f023 0203 	bic.w	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	4978      	ldr	r1, [pc, #480]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aaa:	4b73      	ldr	r3, [pc, #460]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	f023 020c 	bic.w	r2, r3, #12
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab8:	496f      	ldr	r1, [pc, #444]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002acc:	4b6a      	ldr	r3, [pc, #424]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ada:	4967      	ldr	r1, [pc, #412]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002aee:	4b62      	ldr	r3, [pc, #392]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afc:	495e      	ldr	r1, [pc, #376]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b10:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	4956      	ldr	r1, [pc, #344]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b32:	4b51      	ldr	r3, [pc, #324]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b40:	494d      	ldr	r1, [pc, #308]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b54:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b62:	4945      	ldr	r1, [pc, #276]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b76:	4b40      	ldr	r3, [pc, #256]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b84:	493c      	ldr	r1, [pc, #240]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b98:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba6:	4934      	ldr	r1, [pc, #208]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d011      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bba:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bc8:	492b      	ldr	r1, [pc, #172]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bd8:	d101      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002bea:	2301      	movs	r3, #1
 8002bec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bfa:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c08:	491b      	ldr	r1, [pc, #108]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c1c:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c2c:	4912      	ldr	r1, [pc, #72]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00b      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c50:	4909      	ldr	r1, [pc, #36]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00f      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	e002      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	4985      	ldr	r1, [pc, #532]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c90:	4b80      	ldr	r3, [pc, #512]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca0:	497c      	ldr	r1, [pc, #496]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d005      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cb6:	f040 80d6 	bne.w	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cba:	4b76      	ldr	r3, [pc, #472]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a75      	ldr	r2, [pc, #468]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc6:	f7fe fa27 	bl	8001118 <HAL_GetTick>
 8002cca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cce:	f7fe fa23 	bl	8001118 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b64      	cmp	r3, #100	; 0x64
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e194      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ce0:	4b6c      	ldr	r3, [pc, #432]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d021      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d11d      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d00:	4b64      	ldr	r3, [pc, #400]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d0e:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d14:	0e1b      	lsrs	r3, r3, #24
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	019a      	lsls	r2, r3, #6
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	431a      	orrs	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	061b      	lsls	r3, r3, #24
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	071b      	lsls	r3, r3, #28
 8002d34:	4957      	ldr	r1, [pc, #348]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d004      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02e      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d66:	d129      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d68:	4b4a      	ldr	r3, [pc, #296]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d6e:	0c1b      	lsrs	r3, r3, #16
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d76:	4b47      	ldr	r3, [pc, #284]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7c:	0f1b      	lsrs	r3, r3, #28
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	019a      	lsls	r2, r3, #6
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	041b      	lsls	r3, r3, #16
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	431a      	orrs	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	071b      	lsls	r3, r3, #28
 8002d9c:	493d      	ldr	r1, [pc, #244]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002da4:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002daa:	f023 021f 	bic.w	r2, r3, #31
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	3b01      	subs	r3, #1
 8002db4:	4937      	ldr	r1, [pc, #220]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01d      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dc8:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dce:	0e1b      	lsrs	r3, r3, #24
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dd6:	4b2f      	ldr	r3, [pc, #188]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ddc:	0f1b      	lsrs	r3, r3, #28
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	019a      	lsls	r2, r3, #6
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	431a      	orrs	r2, r3
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	431a      	orrs	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	071b      	lsls	r3, r3, #28
 8002dfc:	4925      	ldr	r1, [pc, #148]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d011      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	019a      	lsls	r2, r3, #6
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	061b      	lsls	r3, r3, #24
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	071b      	lsls	r3, r3, #28
 8002e2c:	4919      	ldr	r1, [pc, #100]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a16      	ldr	r2, [pc, #88]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e40:	f7fe f96a 	bl	8001118 <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e48:	f7fe f966 	bl	8001118 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0d7      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	f040 80cd 	bne.w	8003008 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e7a:	f7fe f94d 	bl	8001118 <HAL_GetTick>
 8002e7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e80:	e00a      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e82:	f7fe f949 	bl	8001118 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b64      	cmp	r3, #100	; 0x64
 8002e8e:	d903      	bls.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e0ba      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002e94:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e98:	4b5e      	ldr	r3, [pc, #376]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ea4:	d0ed      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d009      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d02e      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d12a      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ece:	4b51      	ldr	r3, [pc, #324]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed4:	0c1b      	lsrs	r3, r3, #16
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002edc:	4b4d      	ldr	r3, [pc, #308]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee2:	0f1b      	lsrs	r3, r3, #28
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	019a      	lsls	r2, r3, #6
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	061b      	lsls	r3, r3, #24
 8002efc:	431a      	orrs	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	071b      	lsls	r3, r3, #28
 8002f02:	4944      	ldr	r1, [pc, #272]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f0a:	4b42      	ldr	r3, [pc, #264]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	493d      	ldr	r1, [pc, #244]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d022      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f38:	d11d      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f3a:	4b36      	ldr	r3, [pc, #216]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f40:	0e1b      	lsrs	r3, r3, #24
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f48:	4b32      	ldr	r3, [pc, #200]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	0f1b      	lsrs	r3, r3, #28
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	019a      	lsls	r2, r3, #6
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	431a      	orrs	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	061b      	lsls	r3, r3, #24
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	071b      	lsls	r3, r3, #28
 8002f6e:	4929      	ldr	r1, [pc, #164]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d028      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	0e1b      	lsrs	r3, r3, #24
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f90:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	0c1b      	lsrs	r3, r3, #16
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	019a      	lsls	r2, r3, #6
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	041b      	lsls	r3, r3, #16
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	061b      	lsls	r3, r3, #24
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	071b      	lsls	r3, r3, #28
 8002fb6:	4917      	ldr	r1, [pc, #92]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	4911      	ldr	r1, [pc, #68]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fd4:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe0:	f7fe f89a 	bl	8001118 <HAL_GetTick>
 8002fe4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fe8:	f7fe f896 	bl	8001118 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e007      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003006:	d1ef      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800

08003018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e040      	b.n	80030ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd fe7c 	bl	8000d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	; 0x24
 8003044:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f8c4 	bl	80031e4 <UART_SetConfig>
 800305c:	4603      	mov	r3, r0
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e022      	b.n	80030ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fb5c 	bl	800372c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003092:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 fbe3 	bl	8003870 <UART_CheckIdleState>
 80030aa:	4603      	mov	r3, r0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d16c      	bne.n	80031a4 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_UART_Receive_DMA+0x22>
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e065      	b.n	80031a6 <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_UART_Receive_DMA+0x34>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e05e      	b.n	80031a6 <HAL_UART_Receive_DMA+0xf2>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	88fa      	ldrh	r2, [r7, #6]
 80030fa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2222      	movs	r2, #34	; 0x22
 8003108:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310e:	2b00      	cmp	r3, #0
 8003110:	d02a      	beq.n	8003168 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003116:	4a26      	ldr	r2, [pc, #152]	; (80031b0 <HAL_UART_Receive_DMA+0xfc>)
 8003118:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800311e:	4a25      	ldr	r2, [pc, #148]	; (80031b4 <HAL_UART_Receive_DMA+0x100>)
 8003120:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003126:	4a24      	ldr	r2, [pc, #144]	; (80031b8 <HAL_UART_Receive_DMA+0x104>)
 8003128:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800312e:	2200      	movs	r2, #0
 8003130:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3324      	adds	r3, #36	; 0x24
 800313c:	4619      	mov	r1, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	461a      	mov	r2, r3
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	f7fe f9d5 	bl	80014f4 <HAL_DMA_Start_IT>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2210      	movs	r2, #16
 8003154:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2220      	movs	r2, #32
 8003162:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e01e      	b.n	80031a6 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800317e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800319e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e000      	b.n	80031a6 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	080039c9 	.word	0x080039c9
 80031b4:	08003a2d 	.word	0x08003a2d
 80031b8:	08003a49 	.word	0x08003a49

080031bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4bb1      	ldr	r3, [pc, #708]	; (80034d8 <UART_SetConfig+0x2f4>)
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	6939      	ldr	r1, [r7, #16]
 800321c:	430b      	orrs	r3, r1
 800321e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a9f      	ldr	r2, [pc, #636]	; (80034dc <UART_SetConfig+0x2f8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d121      	bne.n	80032a8 <UART_SetConfig+0xc4>
 8003264:	4b9e      	ldr	r3, [pc, #632]	; (80034e0 <UART_SetConfig+0x2fc>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	2b03      	cmp	r3, #3
 8003270:	d816      	bhi.n	80032a0 <UART_SetConfig+0xbc>
 8003272:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <UART_SetConfig+0x94>)
 8003274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003278:	08003289 	.word	0x08003289
 800327c:	08003295 	.word	0x08003295
 8003280:	0800328f 	.word	0x0800328f
 8003284:	0800329b 	.word	0x0800329b
 8003288:	2301      	movs	r3, #1
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e151      	b.n	8003532 <UART_SetConfig+0x34e>
 800328e:	2302      	movs	r3, #2
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e14e      	b.n	8003532 <UART_SetConfig+0x34e>
 8003294:	2304      	movs	r3, #4
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e14b      	b.n	8003532 <UART_SetConfig+0x34e>
 800329a:	2308      	movs	r3, #8
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	e148      	b.n	8003532 <UART_SetConfig+0x34e>
 80032a0:	2310      	movs	r3, #16
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	bf00      	nop
 80032a6:	e144      	b.n	8003532 <UART_SetConfig+0x34e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a8d      	ldr	r2, [pc, #564]	; (80034e4 <UART_SetConfig+0x300>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d134      	bne.n	800331c <UART_SetConfig+0x138>
 80032b2:	4b8b      	ldr	r3, [pc, #556]	; (80034e0 <UART_SetConfig+0x2fc>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b0c      	cmp	r3, #12
 80032be:	d829      	bhi.n	8003314 <UART_SetConfig+0x130>
 80032c0:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <UART_SetConfig+0xe4>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032fd 	.word	0x080032fd
 80032cc:	08003315 	.word	0x08003315
 80032d0:	08003315 	.word	0x08003315
 80032d4:	08003315 	.word	0x08003315
 80032d8:	08003309 	.word	0x08003309
 80032dc:	08003315 	.word	0x08003315
 80032e0:	08003315 	.word	0x08003315
 80032e4:	08003315 	.word	0x08003315
 80032e8:	08003303 	.word	0x08003303
 80032ec:	08003315 	.word	0x08003315
 80032f0:	08003315 	.word	0x08003315
 80032f4:	08003315 	.word	0x08003315
 80032f8:	0800330f 	.word	0x0800330f
 80032fc:	2300      	movs	r3, #0
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e117      	b.n	8003532 <UART_SetConfig+0x34e>
 8003302:	2302      	movs	r3, #2
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e114      	b.n	8003532 <UART_SetConfig+0x34e>
 8003308:	2304      	movs	r3, #4
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e111      	b.n	8003532 <UART_SetConfig+0x34e>
 800330e:	2308      	movs	r3, #8
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e10e      	b.n	8003532 <UART_SetConfig+0x34e>
 8003314:	2310      	movs	r3, #16
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	bf00      	nop
 800331a:	e10a      	b.n	8003532 <UART_SetConfig+0x34e>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a71      	ldr	r2, [pc, #452]	; (80034e8 <UART_SetConfig+0x304>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d120      	bne.n	8003368 <UART_SetConfig+0x184>
 8003326:	4b6e      	ldr	r3, [pc, #440]	; (80034e0 <UART_SetConfig+0x2fc>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003330:	2b10      	cmp	r3, #16
 8003332:	d00f      	beq.n	8003354 <UART_SetConfig+0x170>
 8003334:	2b10      	cmp	r3, #16
 8003336:	d802      	bhi.n	800333e <UART_SetConfig+0x15a>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <UART_SetConfig+0x164>
 800333c:	e010      	b.n	8003360 <UART_SetConfig+0x17c>
 800333e:	2b20      	cmp	r3, #32
 8003340:	d005      	beq.n	800334e <UART_SetConfig+0x16a>
 8003342:	2b30      	cmp	r3, #48	; 0x30
 8003344:	d009      	beq.n	800335a <UART_SetConfig+0x176>
 8003346:	e00b      	b.n	8003360 <UART_SetConfig+0x17c>
 8003348:	2300      	movs	r3, #0
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e0f1      	b.n	8003532 <UART_SetConfig+0x34e>
 800334e:	2302      	movs	r3, #2
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e0ee      	b.n	8003532 <UART_SetConfig+0x34e>
 8003354:	2304      	movs	r3, #4
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e0eb      	b.n	8003532 <UART_SetConfig+0x34e>
 800335a:	2308      	movs	r3, #8
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e0e8      	b.n	8003532 <UART_SetConfig+0x34e>
 8003360:	2310      	movs	r3, #16
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	bf00      	nop
 8003366:	e0e4      	b.n	8003532 <UART_SetConfig+0x34e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a5f      	ldr	r2, [pc, #380]	; (80034ec <UART_SetConfig+0x308>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d120      	bne.n	80033b4 <UART_SetConfig+0x1d0>
 8003372:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <UART_SetConfig+0x2fc>)
 8003374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003378:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800337c:	2b40      	cmp	r3, #64	; 0x40
 800337e:	d00f      	beq.n	80033a0 <UART_SetConfig+0x1bc>
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	d802      	bhi.n	800338a <UART_SetConfig+0x1a6>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <UART_SetConfig+0x1b0>
 8003388:	e010      	b.n	80033ac <UART_SetConfig+0x1c8>
 800338a:	2b80      	cmp	r3, #128	; 0x80
 800338c:	d005      	beq.n	800339a <UART_SetConfig+0x1b6>
 800338e:	2bc0      	cmp	r3, #192	; 0xc0
 8003390:	d009      	beq.n	80033a6 <UART_SetConfig+0x1c2>
 8003392:	e00b      	b.n	80033ac <UART_SetConfig+0x1c8>
 8003394:	2300      	movs	r3, #0
 8003396:	77fb      	strb	r3, [r7, #31]
 8003398:	e0cb      	b.n	8003532 <UART_SetConfig+0x34e>
 800339a:	2302      	movs	r3, #2
 800339c:	77fb      	strb	r3, [r7, #31]
 800339e:	e0c8      	b.n	8003532 <UART_SetConfig+0x34e>
 80033a0:	2304      	movs	r3, #4
 80033a2:	77fb      	strb	r3, [r7, #31]
 80033a4:	e0c5      	b.n	8003532 <UART_SetConfig+0x34e>
 80033a6:	2308      	movs	r3, #8
 80033a8:	77fb      	strb	r3, [r7, #31]
 80033aa:	e0c2      	b.n	8003532 <UART_SetConfig+0x34e>
 80033ac:	2310      	movs	r3, #16
 80033ae:	77fb      	strb	r3, [r7, #31]
 80033b0:	bf00      	nop
 80033b2:	e0be      	b.n	8003532 <UART_SetConfig+0x34e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a4d      	ldr	r2, [pc, #308]	; (80034f0 <UART_SetConfig+0x30c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d124      	bne.n	8003408 <UART_SetConfig+0x224>
 80033be:	4b48      	ldr	r3, [pc, #288]	; (80034e0 <UART_SetConfig+0x2fc>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033cc:	d012      	beq.n	80033f4 <UART_SetConfig+0x210>
 80033ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d2:	d802      	bhi.n	80033da <UART_SetConfig+0x1f6>
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <UART_SetConfig+0x204>
 80033d8:	e012      	b.n	8003400 <UART_SetConfig+0x21c>
 80033da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033de:	d006      	beq.n	80033ee <UART_SetConfig+0x20a>
 80033e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e4:	d009      	beq.n	80033fa <UART_SetConfig+0x216>
 80033e6:	e00b      	b.n	8003400 <UART_SetConfig+0x21c>
 80033e8:	2300      	movs	r3, #0
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e0a1      	b.n	8003532 <UART_SetConfig+0x34e>
 80033ee:	2302      	movs	r3, #2
 80033f0:	77fb      	strb	r3, [r7, #31]
 80033f2:	e09e      	b.n	8003532 <UART_SetConfig+0x34e>
 80033f4:	2304      	movs	r3, #4
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e09b      	b.n	8003532 <UART_SetConfig+0x34e>
 80033fa:	2308      	movs	r3, #8
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	e098      	b.n	8003532 <UART_SetConfig+0x34e>
 8003400:	2310      	movs	r3, #16
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	bf00      	nop
 8003406:	e094      	b.n	8003532 <UART_SetConfig+0x34e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a39      	ldr	r2, [pc, #228]	; (80034f4 <UART_SetConfig+0x310>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d124      	bne.n	800345c <UART_SetConfig+0x278>
 8003412:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <UART_SetConfig+0x2fc>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003418:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800341c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003420:	d012      	beq.n	8003448 <UART_SetConfig+0x264>
 8003422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003426:	d802      	bhi.n	800342e <UART_SetConfig+0x24a>
 8003428:	2b00      	cmp	r3, #0
 800342a:	d007      	beq.n	800343c <UART_SetConfig+0x258>
 800342c:	e012      	b.n	8003454 <UART_SetConfig+0x270>
 800342e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003432:	d006      	beq.n	8003442 <UART_SetConfig+0x25e>
 8003434:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003438:	d009      	beq.n	800344e <UART_SetConfig+0x26a>
 800343a:	e00b      	b.n	8003454 <UART_SetConfig+0x270>
 800343c:	2301      	movs	r3, #1
 800343e:	77fb      	strb	r3, [r7, #31]
 8003440:	e077      	b.n	8003532 <UART_SetConfig+0x34e>
 8003442:	2302      	movs	r3, #2
 8003444:	77fb      	strb	r3, [r7, #31]
 8003446:	e074      	b.n	8003532 <UART_SetConfig+0x34e>
 8003448:	2304      	movs	r3, #4
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e071      	b.n	8003532 <UART_SetConfig+0x34e>
 800344e:	2308      	movs	r3, #8
 8003450:	77fb      	strb	r3, [r7, #31]
 8003452:	e06e      	b.n	8003532 <UART_SetConfig+0x34e>
 8003454:	2310      	movs	r3, #16
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	bf00      	nop
 800345a:	e06a      	b.n	8003532 <UART_SetConfig+0x34e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a25      	ldr	r2, [pc, #148]	; (80034f8 <UART_SetConfig+0x314>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d124      	bne.n	80034b0 <UART_SetConfig+0x2cc>
 8003466:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <UART_SetConfig+0x2fc>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003474:	d012      	beq.n	800349c <UART_SetConfig+0x2b8>
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347a:	d802      	bhi.n	8003482 <UART_SetConfig+0x29e>
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <UART_SetConfig+0x2ac>
 8003480:	e012      	b.n	80034a8 <UART_SetConfig+0x2c4>
 8003482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003486:	d006      	beq.n	8003496 <UART_SetConfig+0x2b2>
 8003488:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800348c:	d009      	beq.n	80034a2 <UART_SetConfig+0x2be>
 800348e:	e00b      	b.n	80034a8 <UART_SetConfig+0x2c4>
 8003490:	2300      	movs	r3, #0
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e04d      	b.n	8003532 <UART_SetConfig+0x34e>
 8003496:	2302      	movs	r3, #2
 8003498:	77fb      	strb	r3, [r7, #31]
 800349a:	e04a      	b.n	8003532 <UART_SetConfig+0x34e>
 800349c:	2304      	movs	r3, #4
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e047      	b.n	8003532 <UART_SetConfig+0x34e>
 80034a2:	2308      	movs	r3, #8
 80034a4:	77fb      	strb	r3, [r7, #31]
 80034a6:	e044      	b.n	8003532 <UART_SetConfig+0x34e>
 80034a8:	2310      	movs	r3, #16
 80034aa:	77fb      	strb	r3, [r7, #31]
 80034ac:	bf00      	nop
 80034ae:	e040      	b.n	8003532 <UART_SetConfig+0x34e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a11      	ldr	r2, [pc, #68]	; (80034fc <UART_SetConfig+0x318>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d139      	bne.n	800352e <UART_SetConfig+0x34a>
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <UART_SetConfig+0x2fc>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034c8:	d027      	beq.n	800351a <UART_SetConfig+0x336>
 80034ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034ce:	d817      	bhi.n	8003500 <UART_SetConfig+0x31c>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01c      	beq.n	800350e <UART_SetConfig+0x32a>
 80034d4:	e027      	b.n	8003526 <UART_SetConfig+0x342>
 80034d6:	bf00      	nop
 80034d8:	efff69f3 	.word	0xefff69f3
 80034dc:	40011000 	.word	0x40011000
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40004400 	.word	0x40004400
 80034e8:	40004800 	.word	0x40004800
 80034ec:	40004c00 	.word	0x40004c00
 80034f0:	40005000 	.word	0x40005000
 80034f4:	40011400 	.word	0x40011400
 80034f8:	40007800 	.word	0x40007800
 80034fc:	40007c00 	.word	0x40007c00
 8003500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003504:	d006      	beq.n	8003514 <UART_SetConfig+0x330>
 8003506:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800350a:	d009      	beq.n	8003520 <UART_SetConfig+0x33c>
 800350c:	e00b      	b.n	8003526 <UART_SetConfig+0x342>
 800350e:	2300      	movs	r3, #0
 8003510:	77fb      	strb	r3, [r7, #31]
 8003512:	e00e      	b.n	8003532 <UART_SetConfig+0x34e>
 8003514:	2302      	movs	r3, #2
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e00b      	b.n	8003532 <UART_SetConfig+0x34e>
 800351a:	2304      	movs	r3, #4
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e008      	b.n	8003532 <UART_SetConfig+0x34e>
 8003520:	2308      	movs	r3, #8
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e005      	b.n	8003532 <UART_SetConfig+0x34e>
 8003526:	2310      	movs	r3, #16
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	bf00      	nop
 800352c:	e001      	b.n	8003532 <UART_SetConfig+0x34e>
 800352e:	2310      	movs	r3, #16
 8003530:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353a:	d17c      	bne.n	8003636 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800353c:	7ffb      	ldrb	r3, [r7, #31]
 800353e:	2b08      	cmp	r3, #8
 8003540:	d859      	bhi.n	80035f6 <UART_SetConfig+0x412>
 8003542:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <UART_SetConfig+0x364>)
 8003544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003548:	0800356d 	.word	0x0800356d
 800354c:	0800358b 	.word	0x0800358b
 8003550:	080035a9 	.word	0x080035a9
 8003554:	080035f7 	.word	0x080035f7
 8003558:	080035c1 	.word	0x080035c1
 800355c:	080035f7 	.word	0x080035f7
 8003560:	080035f7 	.word	0x080035f7
 8003564:	080035f7 	.word	0x080035f7
 8003568:	080035df 	.word	0x080035df
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800356c:	f7ff f906 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8003570:	4603      	mov	r3, r0
 8003572:	005a      	lsls	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	085b      	lsrs	r3, r3, #1
 800357a:	441a      	add	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	b29b      	uxth	r3, r3
 8003586:	61bb      	str	r3, [r7, #24]
        break;
 8003588:	e038      	b.n	80035fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800358a:	f7ff f90b 	bl	80027a4 <HAL_RCC_GetPCLK2Freq>
 800358e:	4603      	mov	r3, r0
 8003590:	005a      	lsls	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	441a      	add	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	61bb      	str	r3, [r7, #24]
        break;
 80035a6:	e029      	b.n	80035fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	085a      	lsrs	r2, r3, #1
 80035ae:	4b5d      	ldr	r3, [pc, #372]	; (8003724 <UART_SetConfig+0x540>)
 80035b0:	4413      	add	r3, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6852      	ldr	r2, [r2, #4]
 80035b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	61bb      	str	r3, [r7, #24]
        break;
 80035be:	e01d      	b.n	80035fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035c0:	f7fe fff8 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 80035c4:	4603      	mov	r3, r0
 80035c6:	005a      	lsls	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	441a      	add	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	b29b      	uxth	r3, r3
 80035da:	61bb      	str	r3, [r7, #24]
        break;
 80035dc:	e00e      	b.n	80035fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	61bb      	str	r3, [r7, #24]
        break;
 80035f4:	e002      	b.n	80035fc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
        break;
 80035fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b0f      	cmp	r3, #15
 8003600:	d916      	bls.n	8003630 <UART_SetConfig+0x44c>
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003608:	d212      	bcs.n	8003630 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f023 030f 	bic.w	r3, r3, #15
 8003612:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	b29b      	uxth	r3, r3
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	b29a      	uxth	r2, r3
 8003620:	89fb      	ldrh	r3, [r7, #14]
 8003622:	4313      	orrs	r3, r2
 8003624:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	89fa      	ldrh	r2, [r7, #14]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	e06e      	b.n	800370e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	75fb      	strb	r3, [r7, #23]
 8003634:	e06b      	b.n	800370e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003636:	7ffb      	ldrb	r3, [r7, #31]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d857      	bhi.n	80036ec <UART_SetConfig+0x508>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <UART_SetConfig+0x460>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003669 	.word	0x08003669
 8003648:	08003685 	.word	0x08003685
 800364c:	080036a1 	.word	0x080036a1
 8003650:	080036ed 	.word	0x080036ed
 8003654:	080036b9 	.word	0x080036b9
 8003658:	080036ed 	.word	0x080036ed
 800365c:	080036ed 	.word	0x080036ed
 8003660:	080036ed 	.word	0x080036ed
 8003664:	080036d5 	.word	0x080036d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003668:	f7ff f888 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 800366c:	4602      	mov	r2, r0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	441a      	add	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	fbb2 f3f3 	udiv	r3, r2, r3
 800367e:	b29b      	uxth	r3, r3
 8003680:	61bb      	str	r3, [r7, #24]
        break;
 8003682:	e036      	b.n	80036f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003684:	f7ff f88e 	bl	80027a4 <HAL_RCC_GetPCLK2Freq>
 8003688:	4602      	mov	r2, r0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	441a      	add	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	b29b      	uxth	r3, r3
 800369c:	61bb      	str	r3, [r7, #24]
        break;
 800369e:	e028      	b.n	80036f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	085a      	lsrs	r2, r3, #1
 80036a6:	4b20      	ldr	r3, [pc, #128]	; (8003728 <UART_SetConfig+0x544>)
 80036a8:	4413      	add	r3, r2
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6852      	ldr	r2, [r2, #4]
 80036ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	61bb      	str	r3, [r7, #24]
        break;
 80036b6:	e01c      	b.n	80036f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80036b8:	f7fe ff7c 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	441a      	add	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	61bb      	str	r3, [r7, #24]
        break;
 80036d2:	e00e      	b.n	80036f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	61bb      	str	r3, [r7, #24]
        break;
 80036ea:	e002      	b.n	80036f2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	75fb      	strb	r3, [r7, #23]
        break;
 80036f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2b0f      	cmp	r3, #15
 80036f6:	d908      	bls.n	800370a <UART_SetConfig+0x526>
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fe:	d204      	bcs.n	800370a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	60da      	str	r2, [r3, #12]
 8003708:	e001      	b.n	800370e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800371a:	7dfb      	ldrb	r3, [r7, #23]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3720      	adds	r7, #32
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	01e84800 	.word	0x01e84800
 8003728:	00f42400 	.word	0x00f42400

0800372c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01a      	beq.n	8003842 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800382a:	d10a      	bne.n	8003842 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	605a      	str	r2, [r3, #4]
  }
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af02      	add	r7, sp, #8
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800387e:	f7fd fc4b 	bl	8001118 <HAL_GetTick>
 8003882:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b08      	cmp	r3, #8
 8003890:	d10e      	bne.n	80038b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003892:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f814 	bl	80038ce <UART_WaitOnFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e00a      	b.n	80038c6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4613      	mov	r3, r2
 80038dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038de:	e02a      	b.n	8003936 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d026      	beq.n	8003936 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e8:	f7fd fc16 	bl	8001118 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d302      	bcc.n	80038fe <UART_WaitOnFlagUntilTimeout+0x30>
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11b      	bne.n	8003936 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800390c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e00f      	b.n	8003956 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4013      	ands	r3, r2
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	429a      	cmp	r2, r3
 8003952:	d0c5      	beq.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003974:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800399e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	661a      	str	r2, [r3, #96]	; 0x60
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039de:	d01e      	beq.n	8003a1e <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a16:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f7fd f93a 	bl	8000c98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f7ff fbbe 	bl	80031bc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b80      	cmp	r3, #128	; 0x80
 8003a6e:	d109      	bne.n	8003a84 <UART_DMAError+0x3c>
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b21      	cmp	r3, #33	; 0x21
 8003a74:	d106      	bne.n	8003a84 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003a7e:	6978      	ldr	r0, [r7, #20]
 8003a80:	f7ff ff6d 	bl	800395e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d109      	bne.n	8003aa6 <UART_DMAError+0x5e>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b22      	cmp	r3, #34	; 0x22
 8003a96:	d106      	bne.n	8003aa6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003aa0:	6978      	ldr	r0, [r7, #20]
 8003aa2:	f7ff ff71 	bl	8003988 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aaa:	f043 0210 	orr.w	r2, r3, #16
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ab2:	6978      	ldr	r0, [r7, #20]
 8003ab4:	f7ff fb8c 	bl	80031d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ab8:	bf00      	nop
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e03c      	b.n	8003b4c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd f99e 	bl	8000e28 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f905 	bl	8003d14 <USART_SetConfig>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e01b      	b.n	8003b4c <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b22:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b32:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  /* TEACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fa65 	bl	8004014 <USART_CheckIdleState>
 8003b4a:	4603      	mov	r3, r0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_USART_Transmit>:
  * @param  Size Amount of data to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	f040 8095 	bne.w	8003c9c <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_USART_Transmit+0x2a>
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e08d      	b.n	8003c9e <HAL_USART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_USART_Transmit+0x3c>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e086      	b.n	8003c9e <HAL_USART_Transmit+0x14a>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2212      	movs	r2, #18
 8003ba2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003ba6:	f7fd fab7 	bl	8001118 <HAL_GetTick>
 8003baa:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	88fa      	ldrh	r2, [r7, #6]
 8003bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc0:	d108      	bne.n	8003bd4 <HAL_USART_Transmit+0x80>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e003      	b.n	8003bdc <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8003bdc:	e02a      	b.n	8003c34 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2200      	movs	r2, #0
 8003be6:	2180      	movs	r1, #128	; 0x80
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f85c 	bl	8003ca6 <USART_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e052      	b.n	8003c9e <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10b      	bne.n	8003c16 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c0c:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	3302      	adds	r3, #2
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	e007      	b.n	8003c26 <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	781a      	ldrb	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	3301      	adds	r3, #1
 8003c24:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1cf      	bne.n	8003bde <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2200      	movs	r2, #0
 8003c46:	2140      	movs	r1, #64	; 0x40
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f82c 	bl	8003ca6 <USART_WaitOnFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e022      	b.n	8003c9e <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2240      	movs	r2, #64	; 0x40
 8003c5e:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2208      	movs	r2, #8
 8003c66:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0208 	orr.w	r2, r2, #8
 8003c76:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0210 	orr.w	r2, r2, #16
 8003c86:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <USART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003cb6:	e018      	b.n	8003cea <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbe:	d014      	beq.n	8003cea <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc0:	f7fd fa2a 	bl	8001118 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d302      	bcc.n	8003cd6 <USART_WaitOnFlagUntilTimeout+0x30>
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e00f      	b.n	8003d0a <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	bf0c      	ite	eq
 8003cfa:	2301      	moveq	r3, #1
 8003cfc:	2300      	movne	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d0d7      	beq.n	8003cb8 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	75bb      	strb	r3, [r7, #22]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4bad      	ldr	r3, [pc, #692]	; (8003ff8 <USART_SetConfig+0x2e4>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	68f9      	ldr	r1, [r7, #12]
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8003d4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d52:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a9a      	ldr	r2, [pc, #616]	; (8003ffc <USART_SetConfig+0x2e8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d122      	bne.n	8003ddc <USART_SetConfig+0xc8>
 8003d96:	4b9a      	ldr	r3, [pc, #616]	; (8004000 <USART_SetConfig+0x2ec>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d817      	bhi.n	8003dd4 <USART_SetConfig+0xc0>
 8003da4:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <USART_SetConfig+0x98>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003dc9 	.word	0x08003dc9
 8003db4:	08003dc3 	.word	0x08003dc3
 8003db8:	08003dcf 	.word	0x08003dcf
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75fb      	strb	r3, [r7, #23]
 8003dc0:	e098      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	75fb      	strb	r3, [r7, #23]
 8003dc6:	e095      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	75fb      	strb	r3, [r7, #23]
 8003dcc:	e092      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	75fb      	strb	r3, [r7, #23]
 8003dd2:	e08f      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	75fb      	strb	r3, [r7, #23]
 8003dd8:	bf00      	nop
 8003dda:	e08b      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a88      	ldr	r2, [pc, #544]	; (8004004 <USART_SetConfig+0x2f0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d134      	bne.n	8003e50 <USART_SetConfig+0x13c>
 8003de6:	4b86      	ldr	r3, [pc, #536]	; (8004000 <USART_SetConfig+0x2ec>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f003 030c 	and.w	r3, r3, #12
 8003df0:	2b0c      	cmp	r3, #12
 8003df2:	d829      	bhi.n	8003e48 <USART_SetConfig+0x134>
 8003df4:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <USART_SetConfig+0xe8>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003e31 	.word	0x08003e31
 8003e00:	08003e49 	.word	0x08003e49
 8003e04:	08003e49 	.word	0x08003e49
 8003e08:	08003e49 	.word	0x08003e49
 8003e0c:	08003e3d 	.word	0x08003e3d
 8003e10:	08003e49 	.word	0x08003e49
 8003e14:	08003e49 	.word	0x08003e49
 8003e18:	08003e49 	.word	0x08003e49
 8003e1c:	08003e37 	.word	0x08003e37
 8003e20:	08003e49 	.word	0x08003e49
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e49 	.word	0x08003e49
 8003e2c:	08003e43 	.word	0x08003e43
 8003e30:	2300      	movs	r3, #0
 8003e32:	75fb      	strb	r3, [r7, #23]
 8003e34:	e05e      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003e36:	2302      	movs	r3, #2
 8003e38:	75fb      	strb	r3, [r7, #23]
 8003e3a:	e05b      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	75fb      	strb	r3, [r7, #23]
 8003e40:	e058      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003e42:	2308      	movs	r3, #8
 8003e44:	75fb      	strb	r3, [r7, #23]
 8003e46:	e055      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003e48:	2310      	movs	r3, #16
 8003e4a:	75fb      	strb	r3, [r7, #23]
 8003e4c:	bf00      	nop
 8003e4e:	e051      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a6c      	ldr	r2, [pc, #432]	; (8004008 <USART_SetConfig+0x2f4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d120      	bne.n	8003e9c <USART_SetConfig+0x188>
 8003e5a:	4b69      	ldr	r3, [pc, #420]	; (8004000 <USART_SetConfig+0x2ec>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d00f      	beq.n	8003e88 <USART_SetConfig+0x174>
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d802      	bhi.n	8003e72 <USART_SetConfig+0x15e>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <USART_SetConfig+0x168>
 8003e70:	e010      	b.n	8003e94 <USART_SetConfig+0x180>
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d005      	beq.n	8003e82 <USART_SetConfig+0x16e>
 8003e76:	2b30      	cmp	r3, #48	; 0x30
 8003e78:	d009      	beq.n	8003e8e <USART_SetConfig+0x17a>
 8003e7a:	e00b      	b.n	8003e94 <USART_SetConfig+0x180>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	75fb      	strb	r3, [r7, #23]
 8003e80:	e038      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003e82:	2302      	movs	r3, #2
 8003e84:	75fb      	strb	r3, [r7, #23]
 8003e86:	e035      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	75fb      	strb	r3, [r7, #23]
 8003e8c:	e032      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003e8e:	2308      	movs	r3, #8
 8003e90:	75fb      	strb	r3, [r7, #23]
 8003e92:	e02f      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003e94:	2310      	movs	r3, #16
 8003e96:	75fb      	strb	r3, [r7, #23]
 8003e98:	bf00      	nop
 8003e9a:	e02b      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a5a      	ldr	r2, [pc, #360]	; (800400c <USART_SetConfig+0x2f8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d124      	bne.n	8003ef0 <USART_SetConfig+0x1dc>
 8003ea6:	4b56      	ldr	r3, [pc, #344]	; (8004000 <USART_SetConfig+0x2ec>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb4:	d012      	beq.n	8003edc <USART_SetConfig+0x1c8>
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eba:	d802      	bhi.n	8003ec2 <USART_SetConfig+0x1ae>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <USART_SetConfig+0x1bc>
 8003ec0:	e012      	b.n	8003ee8 <USART_SetConfig+0x1d4>
 8003ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec6:	d006      	beq.n	8003ed6 <USART_SetConfig+0x1c2>
 8003ec8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ecc:	d009      	beq.n	8003ee2 <USART_SetConfig+0x1ce>
 8003ece:	e00b      	b.n	8003ee8 <USART_SetConfig+0x1d4>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	75fb      	strb	r3, [r7, #23]
 8003ed4:	e00e      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	75fb      	strb	r3, [r7, #23]
 8003eda:	e00b      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003edc:	2304      	movs	r3, #4
 8003ede:	75fb      	strb	r3, [r7, #23]
 8003ee0:	e008      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	75fb      	strb	r3, [r7, #23]
 8003ee6:	e005      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003ee8:	2310      	movs	r3, #16
 8003eea:	75fb      	strb	r3, [r7, #23]
 8003eec:	bf00      	nop
 8003eee:	e001      	b.n	8003ef4 <USART_SetConfig+0x1e0>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	75fb      	strb	r3, [r7, #23]

  switch (clocksource)
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d854      	bhi.n	8003fa4 <USART_SetConfig+0x290>
 8003efa:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <USART_SetConfig+0x1ec>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f41 	.word	0x08003f41
 8003f08:	08003f5d 	.word	0x08003f5d
 8003f0c:	08003fa5 	.word	0x08003fa5
 8003f10:	08003f73 	.word	0x08003f73
 8003f14:	08003fa5 	.word	0x08003fa5
 8003f18:	08003fa5 	.word	0x08003fa5
 8003f1c:	08003fa5 	.word	0x08003fa5
 8003f20:	08003f8f 	.word	0x08003f8f
  {
    case USART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate));
 8003f24:	f7fe fc2a 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	005a      	lsls	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	441a      	add	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	613b      	str	r3, [r7, #16]
      break;
 8003f3e:	e034      	b.n	8003faa <USART_SetConfig+0x296>
    case USART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate));
 8003f40:	f7fe fc30 	bl	80027a4 <HAL_RCC_GetPCLK2Freq>
 8003f44:	4603      	mov	r3, r0
 8003f46:	005a      	lsls	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	441a      	add	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	613b      	str	r3, [r7, #16]
      break;
 8003f5a:	e026      	b.n	8003faa <USART_SetConfig+0x296>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	085a      	lsrs	r2, r3, #1
 8003f62:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <USART_SetConfig+0x2fc>)
 8003f64:	4413      	add	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6852      	ldr	r2, [r2, #4]
 8003f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
      break;
 8003f70:	e01b      	b.n	8003faa <USART_SetConfig+0x296>
    case USART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), husart->Init.BaudRate));
 8003f72:	f7fe fb1f 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8003f76:	4603      	mov	r3, r0
 8003f78:	005a      	lsls	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	441a      	add	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8a:	613b      	str	r3, [r7, #16]
      break;
 8003f8c:	e00d      	b.n	8003faa <USART_SetConfig+0x296>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	613b      	str	r3, [r7, #16]
      break;
 8003fa2:	e002      	b.n	8003faa <USART_SetConfig+0x296>
    default:
      ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	75bb      	strb	r3, [r7, #22]
      break;
 8003fa8:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b0f      	cmp	r3, #15
 8003fae:	d916      	bls.n	8003fde <USART_SetConfig+0x2ca>
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb6:	d212      	bcs.n	8003fde <USART_SetConfig+0x2ca>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f023 030f 	bic.w	r3, r3, #15
 8003fc0:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	897b      	ldrh	r3, [r7, #10]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	817b      	strh	r3, [r7, #10]
    husart->Instance->BRR = brrtemp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	897a      	ldrh	r2, [r7, #10]
 8003fda:	60da      	str	r2, [r3, #12]
 8003fdc:	e001      	b.n	8003fe2 <USART_SetConfig+0x2ce>
  }
  else
  {
    ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	75bb      	strb	r3, [r7, #22]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8003fee:	7dbb      	ldrb	r3, [r7, #22]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	efff69f3 	.word	0xefff69f3
 8003ffc:	40011000 	.word	0x40011000
 8004000:	40023800 	.word	0x40023800
 8004004:	40004400 	.word	0x40004400
 8004008:	40004800 	.word	0x40004800
 800400c:	40011400 	.word	0x40011400
 8004010:	01e84800 	.word	0x01e84800

08004014 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af02      	add	r7, sp, #8
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004022:	f7fd f879 	bl	8001118 <HAL_GetTick>
 8004026:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b08      	cmp	r3, #8
 8004034:	d10e      	bne.n	8004054 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff fe2e 	bl	8003ca6 <USART_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e008      	b.n	8004066 <USART_CheckIdleState+0x52>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <LL_TIM_SetPrescaler>:
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <LL_TIM_SetAutoReload>:
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <LL_TIM_SetRepetitionCounter>:
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f043 0201 	orr.w	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	615a      	str	r2, [r3, #20]
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a3d      	ldr	r2, [pc, #244]	; (80041ec <LL_TIM_Init+0x108>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <LL_TIM_Init+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004102:	d00f      	beq.n	8004124 <LL_TIM_Init+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3a      	ldr	r2, [pc, #232]	; (80041f0 <LL_TIM_Init+0x10c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00b      	beq.n	8004124 <LL_TIM_Init+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a39      	ldr	r2, [pc, #228]	; (80041f4 <LL_TIM_Init+0x110>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d007      	beq.n	8004124 <LL_TIM_Init+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a38      	ldr	r2, [pc, #224]	; (80041f8 <LL_TIM_Init+0x114>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <LL_TIM_Init+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a37      	ldr	r2, [pc, #220]	; (80041fc <LL_TIM_Init+0x118>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d106      	bne.n	8004132 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a2d      	ldr	r2, [pc, #180]	; (80041ec <LL_TIM_Init+0x108>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d02b      	beq.n	8004192 <LL_TIM_Init+0xae>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004140:	d027      	beq.n	8004192 <LL_TIM_Init+0xae>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a2a      	ldr	r2, [pc, #168]	; (80041f0 <LL_TIM_Init+0x10c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d023      	beq.n	8004192 <LL_TIM_Init+0xae>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a29      	ldr	r2, [pc, #164]	; (80041f4 <LL_TIM_Init+0x110>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d01f      	beq.n	8004192 <LL_TIM_Init+0xae>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a28      	ldr	r2, [pc, #160]	; (80041f8 <LL_TIM_Init+0x114>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01b      	beq.n	8004192 <LL_TIM_Init+0xae>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a27      	ldr	r2, [pc, #156]	; (80041fc <LL_TIM_Init+0x118>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d017      	beq.n	8004192 <LL_TIM_Init+0xae>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a26      	ldr	r2, [pc, #152]	; (8004200 <LL_TIM_Init+0x11c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d013      	beq.n	8004192 <LL_TIM_Init+0xae>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a25      	ldr	r2, [pc, #148]	; (8004204 <LL_TIM_Init+0x120>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00f      	beq.n	8004192 <LL_TIM_Init+0xae>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a24      	ldr	r2, [pc, #144]	; (8004208 <LL_TIM_Init+0x124>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00b      	beq.n	8004192 <LL_TIM_Init+0xae>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a23      	ldr	r2, [pc, #140]	; (800420c <LL_TIM_Init+0x128>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d007      	beq.n	8004192 <LL_TIM_Init+0xae>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a22      	ldr	r2, [pc, #136]	; (8004210 <LL_TIM_Init+0x12c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <LL_TIM_Init+0xae>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a21      	ldr	r2, [pc, #132]	; (8004214 <LL_TIM_Init+0x130>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d106      	bne.n	80041a0 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	4619      	mov	r1, r3
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff6c 	bl	800408a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	4619      	mov	r1, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff ff58 	bl	800406e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <LL_TIM_Init+0x108>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d003      	beq.n	80041ce <LL_TIM_Init+0xea>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a0c      	ldr	r2, [pc, #48]	; (80041fc <LL_TIM_Init+0x118>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d105      	bne.n	80041da <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	7c1b      	ldrb	r3, [r3, #16]
 80041d2:	4619      	mov	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ff66 	bl	80040a6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff ff71 	bl	80040c2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40010400 	.word	0x40010400
 8004200:	40014000 	.word	0x40014000
 8004204:	40014400 	.word	0x40014400
 8004208:	40014800 	.word	0x40014800
 800420c:	40001800 	.word	0x40001800
 8004210:	40001c00 	.word	0x40001c00
 8004214:	40002000 	.word	0x40002000

08004218 <__errno>:
 8004218:	4b01      	ldr	r3, [pc, #4]	; (8004220 <__errno+0x8>)
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	2000000c 	.word	0x2000000c

08004224 <__libc_init_array>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	4e0d      	ldr	r6, [pc, #52]	; (800425c <__libc_init_array+0x38>)
 8004228:	4c0d      	ldr	r4, [pc, #52]	; (8004260 <__libc_init_array+0x3c>)
 800422a:	1ba4      	subs	r4, r4, r6
 800422c:	10a4      	asrs	r4, r4, #2
 800422e:	2500      	movs	r5, #0
 8004230:	42a5      	cmp	r5, r4
 8004232:	d109      	bne.n	8004248 <__libc_init_array+0x24>
 8004234:	4e0b      	ldr	r6, [pc, #44]	; (8004264 <__libc_init_array+0x40>)
 8004236:	4c0c      	ldr	r4, [pc, #48]	; (8004268 <__libc_init_array+0x44>)
 8004238:	f000 fc26 	bl	8004a88 <_init>
 800423c:	1ba4      	subs	r4, r4, r6
 800423e:	10a4      	asrs	r4, r4, #2
 8004240:	2500      	movs	r5, #0
 8004242:	42a5      	cmp	r5, r4
 8004244:	d105      	bne.n	8004252 <__libc_init_array+0x2e>
 8004246:	bd70      	pop	{r4, r5, r6, pc}
 8004248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800424c:	4798      	blx	r3
 800424e:	3501      	adds	r5, #1
 8004250:	e7ee      	b.n	8004230 <__libc_init_array+0xc>
 8004252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004256:	4798      	blx	r3
 8004258:	3501      	adds	r5, #1
 800425a:	e7f2      	b.n	8004242 <__libc_init_array+0x1e>
 800425c:	08004b18 	.word	0x08004b18
 8004260:	08004b18 	.word	0x08004b18
 8004264:	08004b18 	.word	0x08004b18
 8004268:	08004b1c 	.word	0x08004b1c

0800426c <memset>:
 800426c:	4402      	add	r2, r0
 800426e:	4603      	mov	r3, r0
 8004270:	4293      	cmp	r3, r2
 8004272:	d100      	bne.n	8004276 <memset+0xa>
 8004274:	4770      	bx	lr
 8004276:	f803 1b01 	strb.w	r1, [r3], #1
 800427a:	e7f9      	b.n	8004270 <memset+0x4>

0800427c <siprintf>:
 800427c:	b40e      	push	{r1, r2, r3}
 800427e:	b500      	push	{lr}
 8004280:	b09c      	sub	sp, #112	; 0x70
 8004282:	ab1d      	add	r3, sp, #116	; 0x74
 8004284:	9002      	str	r0, [sp, #8]
 8004286:	9006      	str	r0, [sp, #24]
 8004288:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800428c:	4809      	ldr	r0, [pc, #36]	; (80042b4 <siprintf+0x38>)
 800428e:	9107      	str	r1, [sp, #28]
 8004290:	9104      	str	r1, [sp, #16]
 8004292:	4909      	ldr	r1, [pc, #36]	; (80042b8 <siprintf+0x3c>)
 8004294:	f853 2b04 	ldr.w	r2, [r3], #4
 8004298:	9105      	str	r1, [sp, #20]
 800429a:	6800      	ldr	r0, [r0, #0]
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	a902      	add	r1, sp, #8
 80042a0:	f000 f866 	bl	8004370 <_svfiprintf_r>
 80042a4:	9b02      	ldr	r3, [sp, #8]
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	b01c      	add	sp, #112	; 0x70
 80042ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80042b0:	b003      	add	sp, #12
 80042b2:	4770      	bx	lr
 80042b4:	2000000c 	.word	0x2000000c
 80042b8:	ffff0208 	.word	0xffff0208

080042bc <__ssputs_r>:
 80042bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c0:	688e      	ldr	r6, [r1, #8]
 80042c2:	429e      	cmp	r6, r3
 80042c4:	4682      	mov	sl, r0
 80042c6:	460c      	mov	r4, r1
 80042c8:	4690      	mov	r8, r2
 80042ca:	4699      	mov	r9, r3
 80042cc:	d837      	bhi.n	800433e <__ssputs_r+0x82>
 80042ce:	898a      	ldrh	r2, [r1, #12]
 80042d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042d4:	d031      	beq.n	800433a <__ssputs_r+0x7e>
 80042d6:	6825      	ldr	r5, [r4, #0]
 80042d8:	6909      	ldr	r1, [r1, #16]
 80042da:	1a6f      	subs	r7, r5, r1
 80042dc:	6965      	ldr	r5, [r4, #20]
 80042de:	2302      	movs	r3, #2
 80042e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80042e8:	f109 0301 	add.w	r3, r9, #1
 80042ec:	443b      	add	r3, r7
 80042ee:	429d      	cmp	r5, r3
 80042f0:	bf38      	it	cc
 80042f2:	461d      	movcc	r5, r3
 80042f4:	0553      	lsls	r3, r2, #21
 80042f6:	d530      	bpl.n	800435a <__ssputs_r+0x9e>
 80042f8:	4629      	mov	r1, r5
 80042fa:	f000 fb2b 	bl	8004954 <_malloc_r>
 80042fe:	4606      	mov	r6, r0
 8004300:	b950      	cbnz	r0, 8004318 <__ssputs_r+0x5c>
 8004302:	230c      	movs	r3, #12
 8004304:	f8ca 3000 	str.w	r3, [sl]
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800430e:	81a3      	strh	r3, [r4, #12]
 8004310:	f04f 30ff 	mov.w	r0, #4294967295
 8004314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004318:	463a      	mov	r2, r7
 800431a:	6921      	ldr	r1, [r4, #16]
 800431c:	f000 faa8 	bl	8004870 <memcpy>
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432a:	81a3      	strh	r3, [r4, #12]
 800432c:	6126      	str	r6, [r4, #16]
 800432e:	6165      	str	r5, [r4, #20]
 8004330:	443e      	add	r6, r7
 8004332:	1bed      	subs	r5, r5, r7
 8004334:	6026      	str	r6, [r4, #0]
 8004336:	60a5      	str	r5, [r4, #8]
 8004338:	464e      	mov	r6, r9
 800433a:	454e      	cmp	r6, r9
 800433c:	d900      	bls.n	8004340 <__ssputs_r+0x84>
 800433e:	464e      	mov	r6, r9
 8004340:	4632      	mov	r2, r6
 8004342:	4641      	mov	r1, r8
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	f000 fa9e 	bl	8004886 <memmove>
 800434a:	68a3      	ldr	r3, [r4, #8]
 800434c:	1b9b      	subs	r3, r3, r6
 800434e:	60a3      	str	r3, [r4, #8]
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	441e      	add	r6, r3
 8004354:	6026      	str	r6, [r4, #0]
 8004356:	2000      	movs	r0, #0
 8004358:	e7dc      	b.n	8004314 <__ssputs_r+0x58>
 800435a:	462a      	mov	r2, r5
 800435c:	f000 fb54 	bl	8004a08 <_realloc_r>
 8004360:	4606      	mov	r6, r0
 8004362:	2800      	cmp	r0, #0
 8004364:	d1e2      	bne.n	800432c <__ssputs_r+0x70>
 8004366:	6921      	ldr	r1, [r4, #16]
 8004368:	4650      	mov	r0, sl
 800436a:	f000 faa5 	bl	80048b8 <_free_r>
 800436e:	e7c8      	b.n	8004302 <__ssputs_r+0x46>

08004370 <_svfiprintf_r>:
 8004370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004374:	461d      	mov	r5, r3
 8004376:	898b      	ldrh	r3, [r1, #12]
 8004378:	061f      	lsls	r7, r3, #24
 800437a:	b09d      	sub	sp, #116	; 0x74
 800437c:	4680      	mov	r8, r0
 800437e:	460c      	mov	r4, r1
 8004380:	4616      	mov	r6, r2
 8004382:	d50f      	bpl.n	80043a4 <_svfiprintf_r+0x34>
 8004384:	690b      	ldr	r3, [r1, #16]
 8004386:	b96b      	cbnz	r3, 80043a4 <_svfiprintf_r+0x34>
 8004388:	2140      	movs	r1, #64	; 0x40
 800438a:	f000 fae3 	bl	8004954 <_malloc_r>
 800438e:	6020      	str	r0, [r4, #0]
 8004390:	6120      	str	r0, [r4, #16]
 8004392:	b928      	cbnz	r0, 80043a0 <_svfiprintf_r+0x30>
 8004394:	230c      	movs	r3, #12
 8004396:	f8c8 3000 	str.w	r3, [r8]
 800439a:	f04f 30ff 	mov.w	r0, #4294967295
 800439e:	e0c8      	b.n	8004532 <_svfiprintf_r+0x1c2>
 80043a0:	2340      	movs	r3, #64	; 0x40
 80043a2:	6163      	str	r3, [r4, #20]
 80043a4:	2300      	movs	r3, #0
 80043a6:	9309      	str	r3, [sp, #36]	; 0x24
 80043a8:	2320      	movs	r3, #32
 80043aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043ae:	2330      	movs	r3, #48	; 0x30
 80043b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043b4:	9503      	str	r5, [sp, #12]
 80043b6:	f04f 0b01 	mov.w	fp, #1
 80043ba:	4637      	mov	r7, r6
 80043bc:	463d      	mov	r5, r7
 80043be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80043c2:	b10b      	cbz	r3, 80043c8 <_svfiprintf_r+0x58>
 80043c4:	2b25      	cmp	r3, #37	; 0x25
 80043c6:	d13e      	bne.n	8004446 <_svfiprintf_r+0xd6>
 80043c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80043cc:	d00b      	beq.n	80043e6 <_svfiprintf_r+0x76>
 80043ce:	4653      	mov	r3, sl
 80043d0:	4632      	mov	r2, r6
 80043d2:	4621      	mov	r1, r4
 80043d4:	4640      	mov	r0, r8
 80043d6:	f7ff ff71 	bl	80042bc <__ssputs_r>
 80043da:	3001      	adds	r0, #1
 80043dc:	f000 80a4 	beq.w	8004528 <_svfiprintf_r+0x1b8>
 80043e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e2:	4453      	add	r3, sl
 80043e4:	9309      	str	r3, [sp, #36]	; 0x24
 80043e6:	783b      	ldrb	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 809d 	beq.w	8004528 <_svfiprintf_r+0x1b8>
 80043ee:	2300      	movs	r3, #0
 80043f0:	f04f 32ff 	mov.w	r2, #4294967295
 80043f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043f8:	9304      	str	r3, [sp, #16]
 80043fa:	9307      	str	r3, [sp, #28]
 80043fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004400:	931a      	str	r3, [sp, #104]	; 0x68
 8004402:	462f      	mov	r7, r5
 8004404:	2205      	movs	r2, #5
 8004406:	f817 1b01 	ldrb.w	r1, [r7], #1
 800440a:	4850      	ldr	r0, [pc, #320]	; (800454c <_svfiprintf_r+0x1dc>)
 800440c:	f7fb ff20 	bl	8000250 <memchr>
 8004410:	9b04      	ldr	r3, [sp, #16]
 8004412:	b9d0      	cbnz	r0, 800444a <_svfiprintf_r+0xda>
 8004414:	06d9      	lsls	r1, r3, #27
 8004416:	bf44      	itt	mi
 8004418:	2220      	movmi	r2, #32
 800441a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800441e:	071a      	lsls	r2, r3, #28
 8004420:	bf44      	itt	mi
 8004422:	222b      	movmi	r2, #43	; 0x2b
 8004424:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004428:	782a      	ldrb	r2, [r5, #0]
 800442a:	2a2a      	cmp	r2, #42	; 0x2a
 800442c:	d015      	beq.n	800445a <_svfiprintf_r+0xea>
 800442e:	9a07      	ldr	r2, [sp, #28]
 8004430:	462f      	mov	r7, r5
 8004432:	2000      	movs	r0, #0
 8004434:	250a      	movs	r5, #10
 8004436:	4639      	mov	r1, r7
 8004438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800443c:	3b30      	subs	r3, #48	; 0x30
 800443e:	2b09      	cmp	r3, #9
 8004440:	d94d      	bls.n	80044de <_svfiprintf_r+0x16e>
 8004442:	b1b8      	cbz	r0, 8004474 <_svfiprintf_r+0x104>
 8004444:	e00f      	b.n	8004466 <_svfiprintf_r+0xf6>
 8004446:	462f      	mov	r7, r5
 8004448:	e7b8      	b.n	80043bc <_svfiprintf_r+0x4c>
 800444a:	4a40      	ldr	r2, [pc, #256]	; (800454c <_svfiprintf_r+0x1dc>)
 800444c:	1a80      	subs	r0, r0, r2
 800444e:	fa0b f000 	lsl.w	r0, fp, r0
 8004452:	4318      	orrs	r0, r3
 8004454:	9004      	str	r0, [sp, #16]
 8004456:	463d      	mov	r5, r7
 8004458:	e7d3      	b.n	8004402 <_svfiprintf_r+0x92>
 800445a:	9a03      	ldr	r2, [sp, #12]
 800445c:	1d11      	adds	r1, r2, #4
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	9103      	str	r1, [sp, #12]
 8004462:	2a00      	cmp	r2, #0
 8004464:	db01      	blt.n	800446a <_svfiprintf_r+0xfa>
 8004466:	9207      	str	r2, [sp, #28]
 8004468:	e004      	b.n	8004474 <_svfiprintf_r+0x104>
 800446a:	4252      	negs	r2, r2
 800446c:	f043 0302 	orr.w	r3, r3, #2
 8004470:	9207      	str	r2, [sp, #28]
 8004472:	9304      	str	r3, [sp, #16]
 8004474:	783b      	ldrb	r3, [r7, #0]
 8004476:	2b2e      	cmp	r3, #46	; 0x2e
 8004478:	d10c      	bne.n	8004494 <_svfiprintf_r+0x124>
 800447a:	787b      	ldrb	r3, [r7, #1]
 800447c:	2b2a      	cmp	r3, #42	; 0x2a
 800447e:	d133      	bne.n	80044e8 <_svfiprintf_r+0x178>
 8004480:	9b03      	ldr	r3, [sp, #12]
 8004482:	1d1a      	adds	r2, r3, #4
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	9203      	str	r2, [sp, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	bfb8      	it	lt
 800448c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004490:	3702      	adds	r7, #2
 8004492:	9305      	str	r3, [sp, #20]
 8004494:	4d2e      	ldr	r5, [pc, #184]	; (8004550 <_svfiprintf_r+0x1e0>)
 8004496:	7839      	ldrb	r1, [r7, #0]
 8004498:	2203      	movs	r2, #3
 800449a:	4628      	mov	r0, r5
 800449c:	f7fb fed8 	bl	8000250 <memchr>
 80044a0:	b138      	cbz	r0, 80044b2 <_svfiprintf_r+0x142>
 80044a2:	2340      	movs	r3, #64	; 0x40
 80044a4:	1b40      	subs	r0, r0, r5
 80044a6:	fa03 f000 	lsl.w	r0, r3, r0
 80044aa:	9b04      	ldr	r3, [sp, #16]
 80044ac:	4303      	orrs	r3, r0
 80044ae:	3701      	adds	r7, #1
 80044b0:	9304      	str	r3, [sp, #16]
 80044b2:	7839      	ldrb	r1, [r7, #0]
 80044b4:	4827      	ldr	r0, [pc, #156]	; (8004554 <_svfiprintf_r+0x1e4>)
 80044b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044ba:	2206      	movs	r2, #6
 80044bc:	1c7e      	adds	r6, r7, #1
 80044be:	f7fb fec7 	bl	8000250 <memchr>
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d038      	beq.n	8004538 <_svfiprintf_r+0x1c8>
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <_svfiprintf_r+0x1e8>)
 80044c8:	bb13      	cbnz	r3, 8004510 <_svfiprintf_r+0x1a0>
 80044ca:	9b03      	ldr	r3, [sp, #12]
 80044cc:	3307      	adds	r3, #7
 80044ce:	f023 0307 	bic.w	r3, r3, #7
 80044d2:	3308      	adds	r3, #8
 80044d4:	9303      	str	r3, [sp, #12]
 80044d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d8:	444b      	add	r3, r9
 80044da:	9309      	str	r3, [sp, #36]	; 0x24
 80044dc:	e76d      	b.n	80043ba <_svfiprintf_r+0x4a>
 80044de:	fb05 3202 	mla	r2, r5, r2, r3
 80044e2:	2001      	movs	r0, #1
 80044e4:	460f      	mov	r7, r1
 80044e6:	e7a6      	b.n	8004436 <_svfiprintf_r+0xc6>
 80044e8:	2300      	movs	r3, #0
 80044ea:	3701      	adds	r7, #1
 80044ec:	9305      	str	r3, [sp, #20]
 80044ee:	4619      	mov	r1, r3
 80044f0:	250a      	movs	r5, #10
 80044f2:	4638      	mov	r0, r7
 80044f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044f8:	3a30      	subs	r2, #48	; 0x30
 80044fa:	2a09      	cmp	r2, #9
 80044fc:	d903      	bls.n	8004506 <_svfiprintf_r+0x196>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0c8      	beq.n	8004494 <_svfiprintf_r+0x124>
 8004502:	9105      	str	r1, [sp, #20]
 8004504:	e7c6      	b.n	8004494 <_svfiprintf_r+0x124>
 8004506:	fb05 2101 	mla	r1, r5, r1, r2
 800450a:	2301      	movs	r3, #1
 800450c:	4607      	mov	r7, r0
 800450e:	e7f0      	b.n	80044f2 <_svfiprintf_r+0x182>
 8004510:	ab03      	add	r3, sp, #12
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	4622      	mov	r2, r4
 8004516:	4b11      	ldr	r3, [pc, #68]	; (800455c <_svfiprintf_r+0x1ec>)
 8004518:	a904      	add	r1, sp, #16
 800451a:	4640      	mov	r0, r8
 800451c:	f3af 8000 	nop.w
 8004520:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004524:	4681      	mov	r9, r0
 8004526:	d1d6      	bne.n	80044d6 <_svfiprintf_r+0x166>
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	065b      	lsls	r3, r3, #25
 800452c:	f53f af35 	bmi.w	800439a <_svfiprintf_r+0x2a>
 8004530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004532:	b01d      	add	sp, #116	; 0x74
 8004534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004538:	ab03      	add	r3, sp, #12
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	4622      	mov	r2, r4
 800453e:	4b07      	ldr	r3, [pc, #28]	; (800455c <_svfiprintf_r+0x1ec>)
 8004540:	a904      	add	r1, sp, #16
 8004542:	4640      	mov	r0, r8
 8004544:	f000 f882 	bl	800464c <_printf_i>
 8004548:	e7ea      	b.n	8004520 <_svfiprintf_r+0x1b0>
 800454a:	bf00      	nop
 800454c:	08004adc 	.word	0x08004adc
 8004550:	08004ae2 	.word	0x08004ae2
 8004554:	08004ae6 	.word	0x08004ae6
 8004558:	00000000 	.word	0x00000000
 800455c:	080042bd 	.word	0x080042bd

08004560 <_printf_common>:
 8004560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	4691      	mov	r9, r2
 8004566:	461f      	mov	r7, r3
 8004568:	688a      	ldr	r2, [r1, #8]
 800456a:	690b      	ldr	r3, [r1, #16]
 800456c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004570:	4293      	cmp	r3, r2
 8004572:	bfb8      	it	lt
 8004574:	4613      	movlt	r3, r2
 8004576:	f8c9 3000 	str.w	r3, [r9]
 800457a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800457e:	4606      	mov	r6, r0
 8004580:	460c      	mov	r4, r1
 8004582:	b112      	cbz	r2, 800458a <_printf_common+0x2a>
 8004584:	3301      	adds	r3, #1
 8004586:	f8c9 3000 	str.w	r3, [r9]
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	0699      	lsls	r1, r3, #26
 800458e:	bf42      	ittt	mi
 8004590:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004594:	3302      	addmi	r3, #2
 8004596:	f8c9 3000 	strmi.w	r3, [r9]
 800459a:	6825      	ldr	r5, [r4, #0]
 800459c:	f015 0506 	ands.w	r5, r5, #6
 80045a0:	d107      	bne.n	80045b2 <_printf_common+0x52>
 80045a2:	f104 0a19 	add.w	sl, r4, #25
 80045a6:	68e3      	ldr	r3, [r4, #12]
 80045a8:	f8d9 2000 	ldr.w	r2, [r9]
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	42ab      	cmp	r3, r5
 80045b0:	dc28      	bgt.n	8004604 <_printf_common+0xa4>
 80045b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	3300      	adds	r3, #0
 80045ba:	bf18      	it	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	0692      	lsls	r2, r2, #26
 80045c0:	d42d      	bmi.n	800461e <_printf_common+0xbe>
 80045c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045c6:	4639      	mov	r1, r7
 80045c8:	4630      	mov	r0, r6
 80045ca:	47c0      	blx	r8
 80045cc:	3001      	adds	r0, #1
 80045ce:	d020      	beq.n	8004612 <_printf_common+0xb2>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	68e5      	ldr	r5, [r4, #12]
 80045d4:	f8d9 2000 	ldr.w	r2, [r9]
 80045d8:	f003 0306 	and.w	r3, r3, #6
 80045dc:	2b04      	cmp	r3, #4
 80045de:	bf08      	it	eq
 80045e0:	1aad      	subeq	r5, r5, r2
 80045e2:	68a3      	ldr	r3, [r4, #8]
 80045e4:	6922      	ldr	r2, [r4, #16]
 80045e6:	bf0c      	ite	eq
 80045e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045ec:	2500      	movne	r5, #0
 80045ee:	4293      	cmp	r3, r2
 80045f0:	bfc4      	itt	gt
 80045f2:	1a9b      	subgt	r3, r3, r2
 80045f4:	18ed      	addgt	r5, r5, r3
 80045f6:	f04f 0900 	mov.w	r9, #0
 80045fa:	341a      	adds	r4, #26
 80045fc:	454d      	cmp	r5, r9
 80045fe:	d11a      	bne.n	8004636 <_printf_common+0xd6>
 8004600:	2000      	movs	r0, #0
 8004602:	e008      	b.n	8004616 <_printf_common+0xb6>
 8004604:	2301      	movs	r3, #1
 8004606:	4652      	mov	r2, sl
 8004608:	4639      	mov	r1, r7
 800460a:	4630      	mov	r0, r6
 800460c:	47c0      	blx	r8
 800460e:	3001      	adds	r0, #1
 8004610:	d103      	bne.n	800461a <_printf_common+0xba>
 8004612:	f04f 30ff 	mov.w	r0, #4294967295
 8004616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461a:	3501      	adds	r5, #1
 800461c:	e7c3      	b.n	80045a6 <_printf_common+0x46>
 800461e:	18e1      	adds	r1, r4, r3
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	2030      	movs	r0, #48	; 0x30
 8004624:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004628:	4422      	add	r2, r4
 800462a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800462e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004632:	3302      	adds	r3, #2
 8004634:	e7c5      	b.n	80045c2 <_printf_common+0x62>
 8004636:	2301      	movs	r3, #1
 8004638:	4622      	mov	r2, r4
 800463a:	4639      	mov	r1, r7
 800463c:	4630      	mov	r0, r6
 800463e:	47c0      	blx	r8
 8004640:	3001      	adds	r0, #1
 8004642:	d0e6      	beq.n	8004612 <_printf_common+0xb2>
 8004644:	f109 0901 	add.w	r9, r9, #1
 8004648:	e7d8      	b.n	80045fc <_printf_common+0x9c>
	...

0800464c <_printf_i>:
 800464c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004650:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004654:	460c      	mov	r4, r1
 8004656:	7e09      	ldrb	r1, [r1, #24]
 8004658:	b085      	sub	sp, #20
 800465a:	296e      	cmp	r1, #110	; 0x6e
 800465c:	4617      	mov	r7, r2
 800465e:	4606      	mov	r6, r0
 8004660:	4698      	mov	r8, r3
 8004662:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004664:	f000 80b3 	beq.w	80047ce <_printf_i+0x182>
 8004668:	d822      	bhi.n	80046b0 <_printf_i+0x64>
 800466a:	2963      	cmp	r1, #99	; 0x63
 800466c:	d036      	beq.n	80046dc <_printf_i+0x90>
 800466e:	d80a      	bhi.n	8004686 <_printf_i+0x3a>
 8004670:	2900      	cmp	r1, #0
 8004672:	f000 80b9 	beq.w	80047e8 <_printf_i+0x19c>
 8004676:	2958      	cmp	r1, #88	; 0x58
 8004678:	f000 8083 	beq.w	8004782 <_printf_i+0x136>
 800467c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004680:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004684:	e032      	b.n	80046ec <_printf_i+0xa0>
 8004686:	2964      	cmp	r1, #100	; 0x64
 8004688:	d001      	beq.n	800468e <_printf_i+0x42>
 800468a:	2969      	cmp	r1, #105	; 0x69
 800468c:	d1f6      	bne.n	800467c <_printf_i+0x30>
 800468e:	6820      	ldr	r0, [r4, #0]
 8004690:	6813      	ldr	r3, [r2, #0]
 8004692:	0605      	lsls	r5, r0, #24
 8004694:	f103 0104 	add.w	r1, r3, #4
 8004698:	d52a      	bpl.n	80046f0 <_printf_i+0xa4>
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6011      	str	r1, [r2, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da03      	bge.n	80046aa <_printf_i+0x5e>
 80046a2:	222d      	movs	r2, #45	; 0x2d
 80046a4:	425b      	negs	r3, r3
 80046a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80046aa:	486f      	ldr	r0, [pc, #444]	; (8004868 <_printf_i+0x21c>)
 80046ac:	220a      	movs	r2, #10
 80046ae:	e039      	b.n	8004724 <_printf_i+0xd8>
 80046b0:	2973      	cmp	r1, #115	; 0x73
 80046b2:	f000 809d 	beq.w	80047f0 <_printf_i+0x1a4>
 80046b6:	d808      	bhi.n	80046ca <_printf_i+0x7e>
 80046b8:	296f      	cmp	r1, #111	; 0x6f
 80046ba:	d020      	beq.n	80046fe <_printf_i+0xb2>
 80046bc:	2970      	cmp	r1, #112	; 0x70
 80046be:	d1dd      	bne.n	800467c <_printf_i+0x30>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	f043 0320 	orr.w	r3, r3, #32
 80046c6:	6023      	str	r3, [r4, #0]
 80046c8:	e003      	b.n	80046d2 <_printf_i+0x86>
 80046ca:	2975      	cmp	r1, #117	; 0x75
 80046cc:	d017      	beq.n	80046fe <_printf_i+0xb2>
 80046ce:	2978      	cmp	r1, #120	; 0x78
 80046d0:	d1d4      	bne.n	800467c <_printf_i+0x30>
 80046d2:	2378      	movs	r3, #120	; 0x78
 80046d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046d8:	4864      	ldr	r0, [pc, #400]	; (800486c <_printf_i+0x220>)
 80046da:	e055      	b.n	8004788 <_printf_i+0x13c>
 80046dc:	6813      	ldr	r3, [r2, #0]
 80046de:	1d19      	adds	r1, r3, #4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6011      	str	r1, [r2, #0]
 80046e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046ec:	2301      	movs	r3, #1
 80046ee:	e08c      	b.n	800480a <_printf_i+0x1be>
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6011      	str	r1, [r2, #0]
 80046f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046f8:	bf18      	it	ne
 80046fa:	b21b      	sxthne	r3, r3
 80046fc:	e7cf      	b.n	800469e <_printf_i+0x52>
 80046fe:	6813      	ldr	r3, [r2, #0]
 8004700:	6825      	ldr	r5, [r4, #0]
 8004702:	1d18      	adds	r0, r3, #4
 8004704:	6010      	str	r0, [r2, #0]
 8004706:	0628      	lsls	r0, r5, #24
 8004708:	d501      	bpl.n	800470e <_printf_i+0xc2>
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	e002      	b.n	8004714 <_printf_i+0xc8>
 800470e:	0668      	lsls	r0, r5, #25
 8004710:	d5fb      	bpl.n	800470a <_printf_i+0xbe>
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	4854      	ldr	r0, [pc, #336]	; (8004868 <_printf_i+0x21c>)
 8004716:	296f      	cmp	r1, #111	; 0x6f
 8004718:	bf14      	ite	ne
 800471a:	220a      	movne	r2, #10
 800471c:	2208      	moveq	r2, #8
 800471e:	2100      	movs	r1, #0
 8004720:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004724:	6865      	ldr	r5, [r4, #4]
 8004726:	60a5      	str	r5, [r4, #8]
 8004728:	2d00      	cmp	r5, #0
 800472a:	f2c0 8095 	blt.w	8004858 <_printf_i+0x20c>
 800472e:	6821      	ldr	r1, [r4, #0]
 8004730:	f021 0104 	bic.w	r1, r1, #4
 8004734:	6021      	str	r1, [r4, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d13d      	bne.n	80047b6 <_printf_i+0x16a>
 800473a:	2d00      	cmp	r5, #0
 800473c:	f040 808e 	bne.w	800485c <_printf_i+0x210>
 8004740:	4665      	mov	r5, ip
 8004742:	2a08      	cmp	r2, #8
 8004744:	d10b      	bne.n	800475e <_printf_i+0x112>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	07db      	lsls	r3, r3, #31
 800474a:	d508      	bpl.n	800475e <_printf_i+0x112>
 800474c:	6923      	ldr	r3, [r4, #16]
 800474e:	6862      	ldr	r2, [r4, #4]
 8004750:	429a      	cmp	r2, r3
 8004752:	bfde      	ittt	le
 8004754:	2330      	movle	r3, #48	; 0x30
 8004756:	f805 3c01 	strble.w	r3, [r5, #-1]
 800475a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800475e:	ebac 0305 	sub.w	r3, ip, r5
 8004762:	6123      	str	r3, [r4, #16]
 8004764:	f8cd 8000 	str.w	r8, [sp]
 8004768:	463b      	mov	r3, r7
 800476a:	aa03      	add	r2, sp, #12
 800476c:	4621      	mov	r1, r4
 800476e:	4630      	mov	r0, r6
 8004770:	f7ff fef6 	bl	8004560 <_printf_common>
 8004774:	3001      	adds	r0, #1
 8004776:	d14d      	bne.n	8004814 <_printf_i+0x1c8>
 8004778:	f04f 30ff 	mov.w	r0, #4294967295
 800477c:	b005      	add	sp, #20
 800477e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004782:	4839      	ldr	r0, [pc, #228]	; (8004868 <_printf_i+0x21c>)
 8004784:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004788:	6813      	ldr	r3, [r2, #0]
 800478a:	6821      	ldr	r1, [r4, #0]
 800478c:	1d1d      	adds	r5, r3, #4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6015      	str	r5, [r2, #0]
 8004792:	060a      	lsls	r2, r1, #24
 8004794:	d50b      	bpl.n	80047ae <_printf_i+0x162>
 8004796:	07ca      	lsls	r2, r1, #31
 8004798:	bf44      	itt	mi
 800479a:	f041 0120 	orrmi.w	r1, r1, #32
 800479e:	6021      	strmi	r1, [r4, #0]
 80047a0:	b91b      	cbnz	r3, 80047aa <_printf_i+0x15e>
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	f022 0220 	bic.w	r2, r2, #32
 80047a8:	6022      	str	r2, [r4, #0]
 80047aa:	2210      	movs	r2, #16
 80047ac:	e7b7      	b.n	800471e <_printf_i+0xd2>
 80047ae:	064d      	lsls	r5, r1, #25
 80047b0:	bf48      	it	mi
 80047b2:	b29b      	uxthmi	r3, r3
 80047b4:	e7ef      	b.n	8004796 <_printf_i+0x14a>
 80047b6:	4665      	mov	r5, ip
 80047b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80047bc:	fb02 3311 	mls	r3, r2, r1, r3
 80047c0:	5cc3      	ldrb	r3, [r0, r3]
 80047c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80047c6:	460b      	mov	r3, r1
 80047c8:	2900      	cmp	r1, #0
 80047ca:	d1f5      	bne.n	80047b8 <_printf_i+0x16c>
 80047cc:	e7b9      	b.n	8004742 <_printf_i+0xf6>
 80047ce:	6813      	ldr	r3, [r2, #0]
 80047d0:	6825      	ldr	r5, [r4, #0]
 80047d2:	6961      	ldr	r1, [r4, #20]
 80047d4:	1d18      	adds	r0, r3, #4
 80047d6:	6010      	str	r0, [r2, #0]
 80047d8:	0628      	lsls	r0, r5, #24
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	d501      	bpl.n	80047e2 <_printf_i+0x196>
 80047de:	6019      	str	r1, [r3, #0]
 80047e0:	e002      	b.n	80047e8 <_printf_i+0x19c>
 80047e2:	066a      	lsls	r2, r5, #25
 80047e4:	d5fb      	bpl.n	80047de <_printf_i+0x192>
 80047e6:	8019      	strh	r1, [r3, #0]
 80047e8:	2300      	movs	r3, #0
 80047ea:	6123      	str	r3, [r4, #16]
 80047ec:	4665      	mov	r5, ip
 80047ee:	e7b9      	b.n	8004764 <_printf_i+0x118>
 80047f0:	6813      	ldr	r3, [r2, #0]
 80047f2:	1d19      	adds	r1, r3, #4
 80047f4:	6011      	str	r1, [r2, #0]
 80047f6:	681d      	ldr	r5, [r3, #0]
 80047f8:	6862      	ldr	r2, [r4, #4]
 80047fa:	2100      	movs	r1, #0
 80047fc:	4628      	mov	r0, r5
 80047fe:	f7fb fd27 	bl	8000250 <memchr>
 8004802:	b108      	cbz	r0, 8004808 <_printf_i+0x1bc>
 8004804:	1b40      	subs	r0, r0, r5
 8004806:	6060      	str	r0, [r4, #4]
 8004808:	6863      	ldr	r3, [r4, #4]
 800480a:	6123      	str	r3, [r4, #16]
 800480c:	2300      	movs	r3, #0
 800480e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004812:	e7a7      	b.n	8004764 <_printf_i+0x118>
 8004814:	6923      	ldr	r3, [r4, #16]
 8004816:	462a      	mov	r2, r5
 8004818:	4639      	mov	r1, r7
 800481a:	4630      	mov	r0, r6
 800481c:	47c0      	blx	r8
 800481e:	3001      	adds	r0, #1
 8004820:	d0aa      	beq.n	8004778 <_printf_i+0x12c>
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	079b      	lsls	r3, r3, #30
 8004826:	d413      	bmi.n	8004850 <_printf_i+0x204>
 8004828:	68e0      	ldr	r0, [r4, #12]
 800482a:	9b03      	ldr	r3, [sp, #12]
 800482c:	4298      	cmp	r0, r3
 800482e:	bfb8      	it	lt
 8004830:	4618      	movlt	r0, r3
 8004832:	e7a3      	b.n	800477c <_printf_i+0x130>
 8004834:	2301      	movs	r3, #1
 8004836:	464a      	mov	r2, r9
 8004838:	4639      	mov	r1, r7
 800483a:	4630      	mov	r0, r6
 800483c:	47c0      	blx	r8
 800483e:	3001      	adds	r0, #1
 8004840:	d09a      	beq.n	8004778 <_printf_i+0x12c>
 8004842:	3501      	adds	r5, #1
 8004844:	68e3      	ldr	r3, [r4, #12]
 8004846:	9a03      	ldr	r2, [sp, #12]
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	42ab      	cmp	r3, r5
 800484c:	dcf2      	bgt.n	8004834 <_printf_i+0x1e8>
 800484e:	e7eb      	b.n	8004828 <_printf_i+0x1dc>
 8004850:	2500      	movs	r5, #0
 8004852:	f104 0919 	add.w	r9, r4, #25
 8004856:	e7f5      	b.n	8004844 <_printf_i+0x1f8>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1ac      	bne.n	80047b6 <_printf_i+0x16a>
 800485c:	7803      	ldrb	r3, [r0, #0]
 800485e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004862:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004866:	e76c      	b.n	8004742 <_printf_i+0xf6>
 8004868:	08004aed 	.word	0x08004aed
 800486c:	08004afe 	.word	0x08004afe

08004870 <memcpy>:
 8004870:	b510      	push	{r4, lr}
 8004872:	1e43      	subs	r3, r0, #1
 8004874:	440a      	add	r2, r1
 8004876:	4291      	cmp	r1, r2
 8004878:	d100      	bne.n	800487c <memcpy+0xc>
 800487a:	bd10      	pop	{r4, pc}
 800487c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004884:	e7f7      	b.n	8004876 <memcpy+0x6>

08004886 <memmove>:
 8004886:	4288      	cmp	r0, r1
 8004888:	b510      	push	{r4, lr}
 800488a:	eb01 0302 	add.w	r3, r1, r2
 800488e:	d807      	bhi.n	80048a0 <memmove+0x1a>
 8004890:	1e42      	subs	r2, r0, #1
 8004892:	4299      	cmp	r1, r3
 8004894:	d00a      	beq.n	80048ac <memmove+0x26>
 8004896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800489e:	e7f8      	b.n	8004892 <memmove+0xc>
 80048a0:	4283      	cmp	r3, r0
 80048a2:	d9f5      	bls.n	8004890 <memmove+0xa>
 80048a4:	1881      	adds	r1, r0, r2
 80048a6:	1ad2      	subs	r2, r2, r3
 80048a8:	42d3      	cmn	r3, r2
 80048aa:	d100      	bne.n	80048ae <memmove+0x28>
 80048ac:	bd10      	pop	{r4, pc}
 80048ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80048b6:	e7f7      	b.n	80048a8 <memmove+0x22>

080048b8 <_free_r>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	4605      	mov	r5, r0
 80048bc:	2900      	cmp	r1, #0
 80048be:	d045      	beq.n	800494c <_free_r+0x94>
 80048c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c4:	1f0c      	subs	r4, r1, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bfb8      	it	lt
 80048ca:	18e4      	addlt	r4, r4, r3
 80048cc:	f000 f8d2 	bl	8004a74 <__malloc_lock>
 80048d0:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <_free_r+0x98>)
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	4610      	mov	r0, r2
 80048d6:	b933      	cbnz	r3, 80048e6 <_free_r+0x2e>
 80048d8:	6063      	str	r3, [r4, #4]
 80048da:	6014      	str	r4, [r2, #0]
 80048dc:	4628      	mov	r0, r5
 80048de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048e2:	f000 b8c8 	b.w	8004a76 <__malloc_unlock>
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	d90c      	bls.n	8004904 <_free_r+0x4c>
 80048ea:	6821      	ldr	r1, [r4, #0]
 80048ec:	1862      	adds	r2, r4, r1
 80048ee:	4293      	cmp	r3, r2
 80048f0:	bf04      	itt	eq
 80048f2:	681a      	ldreq	r2, [r3, #0]
 80048f4:	685b      	ldreq	r3, [r3, #4]
 80048f6:	6063      	str	r3, [r4, #4]
 80048f8:	bf04      	itt	eq
 80048fa:	1852      	addeq	r2, r2, r1
 80048fc:	6022      	streq	r2, [r4, #0]
 80048fe:	6004      	str	r4, [r0, #0]
 8004900:	e7ec      	b.n	80048dc <_free_r+0x24>
 8004902:	4613      	mov	r3, r2
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	b10a      	cbz	r2, 800490c <_free_r+0x54>
 8004908:	42a2      	cmp	r2, r4
 800490a:	d9fa      	bls.n	8004902 <_free_r+0x4a>
 800490c:	6819      	ldr	r1, [r3, #0]
 800490e:	1858      	adds	r0, r3, r1
 8004910:	42a0      	cmp	r0, r4
 8004912:	d10b      	bne.n	800492c <_free_r+0x74>
 8004914:	6820      	ldr	r0, [r4, #0]
 8004916:	4401      	add	r1, r0
 8004918:	1858      	adds	r0, r3, r1
 800491a:	4282      	cmp	r2, r0
 800491c:	6019      	str	r1, [r3, #0]
 800491e:	d1dd      	bne.n	80048dc <_free_r+0x24>
 8004920:	6810      	ldr	r0, [r2, #0]
 8004922:	6852      	ldr	r2, [r2, #4]
 8004924:	605a      	str	r2, [r3, #4]
 8004926:	4401      	add	r1, r0
 8004928:	6019      	str	r1, [r3, #0]
 800492a:	e7d7      	b.n	80048dc <_free_r+0x24>
 800492c:	d902      	bls.n	8004934 <_free_r+0x7c>
 800492e:	230c      	movs	r3, #12
 8004930:	602b      	str	r3, [r5, #0]
 8004932:	e7d3      	b.n	80048dc <_free_r+0x24>
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	1821      	adds	r1, r4, r0
 8004938:	428a      	cmp	r2, r1
 800493a:	bf04      	itt	eq
 800493c:	6811      	ldreq	r1, [r2, #0]
 800493e:	6852      	ldreq	r2, [r2, #4]
 8004940:	6062      	str	r2, [r4, #4]
 8004942:	bf04      	itt	eq
 8004944:	1809      	addeq	r1, r1, r0
 8004946:	6021      	streq	r1, [r4, #0]
 8004948:	605c      	str	r4, [r3, #4]
 800494a:	e7c7      	b.n	80048dc <_free_r+0x24>
 800494c:	bd38      	pop	{r3, r4, r5, pc}
 800494e:	bf00      	nop
 8004950:	20000094 	.word	0x20000094

08004954 <_malloc_r>:
 8004954:	b570      	push	{r4, r5, r6, lr}
 8004956:	1ccd      	adds	r5, r1, #3
 8004958:	f025 0503 	bic.w	r5, r5, #3
 800495c:	3508      	adds	r5, #8
 800495e:	2d0c      	cmp	r5, #12
 8004960:	bf38      	it	cc
 8004962:	250c      	movcc	r5, #12
 8004964:	2d00      	cmp	r5, #0
 8004966:	4606      	mov	r6, r0
 8004968:	db01      	blt.n	800496e <_malloc_r+0x1a>
 800496a:	42a9      	cmp	r1, r5
 800496c:	d903      	bls.n	8004976 <_malloc_r+0x22>
 800496e:	230c      	movs	r3, #12
 8004970:	6033      	str	r3, [r6, #0]
 8004972:	2000      	movs	r0, #0
 8004974:	bd70      	pop	{r4, r5, r6, pc}
 8004976:	f000 f87d 	bl	8004a74 <__malloc_lock>
 800497a:	4a21      	ldr	r2, [pc, #132]	; (8004a00 <_malloc_r+0xac>)
 800497c:	6814      	ldr	r4, [r2, #0]
 800497e:	4621      	mov	r1, r4
 8004980:	b991      	cbnz	r1, 80049a8 <_malloc_r+0x54>
 8004982:	4c20      	ldr	r4, [pc, #128]	; (8004a04 <_malloc_r+0xb0>)
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	b91b      	cbnz	r3, 8004990 <_malloc_r+0x3c>
 8004988:	4630      	mov	r0, r6
 800498a:	f000 f863 	bl	8004a54 <_sbrk_r>
 800498e:	6020      	str	r0, [r4, #0]
 8004990:	4629      	mov	r1, r5
 8004992:	4630      	mov	r0, r6
 8004994:	f000 f85e 	bl	8004a54 <_sbrk_r>
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d124      	bne.n	80049e6 <_malloc_r+0x92>
 800499c:	230c      	movs	r3, #12
 800499e:	6033      	str	r3, [r6, #0]
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 f868 	bl	8004a76 <__malloc_unlock>
 80049a6:	e7e4      	b.n	8004972 <_malloc_r+0x1e>
 80049a8:	680b      	ldr	r3, [r1, #0]
 80049aa:	1b5b      	subs	r3, r3, r5
 80049ac:	d418      	bmi.n	80049e0 <_malloc_r+0x8c>
 80049ae:	2b0b      	cmp	r3, #11
 80049b0:	d90f      	bls.n	80049d2 <_malloc_r+0x7e>
 80049b2:	600b      	str	r3, [r1, #0]
 80049b4:	50cd      	str	r5, [r1, r3]
 80049b6:	18cc      	adds	r4, r1, r3
 80049b8:	4630      	mov	r0, r6
 80049ba:	f000 f85c 	bl	8004a76 <__malloc_unlock>
 80049be:	f104 000b 	add.w	r0, r4, #11
 80049c2:	1d23      	adds	r3, r4, #4
 80049c4:	f020 0007 	bic.w	r0, r0, #7
 80049c8:	1ac3      	subs	r3, r0, r3
 80049ca:	d0d3      	beq.n	8004974 <_malloc_r+0x20>
 80049cc:	425a      	negs	r2, r3
 80049ce:	50e2      	str	r2, [r4, r3]
 80049d0:	e7d0      	b.n	8004974 <_malloc_r+0x20>
 80049d2:	428c      	cmp	r4, r1
 80049d4:	684b      	ldr	r3, [r1, #4]
 80049d6:	bf16      	itet	ne
 80049d8:	6063      	strne	r3, [r4, #4]
 80049da:	6013      	streq	r3, [r2, #0]
 80049dc:	460c      	movne	r4, r1
 80049de:	e7eb      	b.n	80049b8 <_malloc_r+0x64>
 80049e0:	460c      	mov	r4, r1
 80049e2:	6849      	ldr	r1, [r1, #4]
 80049e4:	e7cc      	b.n	8004980 <_malloc_r+0x2c>
 80049e6:	1cc4      	adds	r4, r0, #3
 80049e8:	f024 0403 	bic.w	r4, r4, #3
 80049ec:	42a0      	cmp	r0, r4
 80049ee:	d005      	beq.n	80049fc <_malloc_r+0xa8>
 80049f0:	1a21      	subs	r1, r4, r0
 80049f2:	4630      	mov	r0, r6
 80049f4:	f000 f82e 	bl	8004a54 <_sbrk_r>
 80049f8:	3001      	adds	r0, #1
 80049fa:	d0cf      	beq.n	800499c <_malloc_r+0x48>
 80049fc:	6025      	str	r5, [r4, #0]
 80049fe:	e7db      	b.n	80049b8 <_malloc_r+0x64>
 8004a00:	20000094 	.word	0x20000094
 8004a04:	20000098 	.word	0x20000098

08004a08 <_realloc_r>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	4607      	mov	r7, r0
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	460e      	mov	r6, r1
 8004a10:	b921      	cbnz	r1, 8004a1c <_realloc_r+0x14>
 8004a12:	4611      	mov	r1, r2
 8004a14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a18:	f7ff bf9c 	b.w	8004954 <_malloc_r>
 8004a1c:	b922      	cbnz	r2, 8004a28 <_realloc_r+0x20>
 8004a1e:	f7ff ff4b 	bl	80048b8 <_free_r>
 8004a22:	4625      	mov	r5, r4
 8004a24:	4628      	mov	r0, r5
 8004a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a28:	f000 f826 	bl	8004a78 <_malloc_usable_size_r>
 8004a2c:	42a0      	cmp	r0, r4
 8004a2e:	d20f      	bcs.n	8004a50 <_realloc_r+0x48>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4638      	mov	r0, r7
 8004a34:	f7ff ff8e 	bl	8004954 <_malloc_r>
 8004a38:	4605      	mov	r5, r0
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d0f2      	beq.n	8004a24 <_realloc_r+0x1c>
 8004a3e:	4631      	mov	r1, r6
 8004a40:	4622      	mov	r2, r4
 8004a42:	f7ff ff15 	bl	8004870 <memcpy>
 8004a46:	4631      	mov	r1, r6
 8004a48:	4638      	mov	r0, r7
 8004a4a:	f7ff ff35 	bl	80048b8 <_free_r>
 8004a4e:	e7e9      	b.n	8004a24 <_realloc_r+0x1c>
 8004a50:	4635      	mov	r5, r6
 8004a52:	e7e7      	b.n	8004a24 <_realloc_r+0x1c>

08004a54 <_sbrk_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4c06      	ldr	r4, [pc, #24]	; (8004a70 <_sbrk_r+0x1c>)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	6023      	str	r3, [r4, #0]
 8004a60:	f7fc fa7e 	bl	8000f60 <_sbrk>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d102      	bne.n	8004a6e <_sbrk_r+0x1a>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	b103      	cbz	r3, 8004a6e <_sbrk_r+0x1a>
 8004a6c:	602b      	str	r3, [r5, #0]
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
 8004a70:	20000260 	.word	0x20000260

08004a74 <__malloc_lock>:
 8004a74:	4770      	bx	lr

08004a76 <__malloc_unlock>:
 8004a76:	4770      	bx	lr

08004a78 <_malloc_usable_size_r>:
 8004a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a7c:	1f18      	subs	r0, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bfbc      	itt	lt
 8004a82:	580b      	ldrlt	r3, [r1, r0]
 8004a84:	18c0      	addlt	r0, r0, r3
 8004a86:	4770      	bx	lr

08004a88 <_init>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr

08004a94 <_fini>:
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	bf00      	nop
 8004a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9a:	bc08      	pop	{r3}
 8004a9c:	469e      	mov	lr, r3
 8004a9e:	4770      	bx	lr
